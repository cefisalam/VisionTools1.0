# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'IPCVToolBox.ui'
#
# Created by: PyQt5 UI code generator 5.12.1
#
# WARNING! All changes made in this file will be lost!

# Import Essential Libraries
from fbs_runtime.application_context import ApplicationContext
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *

import numpy as np
import matplotlib.pyplot as plt
import cv2 as cv
from os.path import join, isfile
from os import listdir
from glob2 import glob
from decimal import Decimal
import imutils

# Start of GUI Initialization
class Ui_IPCVToolBox(object):
    def setupUi(self, IPCVToolBox):
        IPCVToolBox.setObjectName("IPCVToolBox")
        IPCVToolBox.resize(611, 606)
        self.label = QtWidgets.QLabel(IPCVToolBox)
        self.label.setGeometry(QtCore.QRect(50, 10, 511, 41))
        self.label.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label.setTextFormat(QtCore.Qt.RichText)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.toolBox = QtWidgets.QToolBox(IPCVToolBox)
        self.toolBox.setGeometry(QtCore.QRect(40, 70, 531, 521))
        self.toolBox.setFrameShadow(QtWidgets.QFrame.Raised)
        self.toolBox.setObjectName("toolBox")
        self.IPTools = QtWidgets.QWidget()
        self.IPTools.setGeometry(QtCore.QRect(0, 0, 531, 428))
        self.IPTools.setObjectName("IPTools")
        self.TabWidget = QtWidgets.QTabWidget(self.IPTools)
        self.TabWidget.setGeometry(QtCore.QRect(20, 70, 491, 351))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.TabWidget.setPalette(palette)
        self.TabWidget.setObjectName("TabWidget")
        self.tab_1 = QtWidgets.QWidget()
        self.tab_1.setAccessibleName("")
        self.tab_1.setObjectName("tab_1")
        self.ColorSpaces = QtWidgets.QGroupBox(self.tab_1)
        self.ColorSpaces.setGeometry(QtCore.QRect(40, 30, 181, 251))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.ColorSpaces.setPalette(palette)
        self.ColorSpaces.setObjectName("ColorSpaces")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.ColorSpaces)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 30, 160, 211))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.GrayButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.GrayButton.setObjectName("GrayButton")
        self.verticalLayout.addWidget(self.GrayButton)
        self.HSVButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.HSVButton.setObjectName("HSVButton")
        self.verticalLayout.addWidget(self.HSVButton)
        self.YCbCrButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.YCbCrButton.setObjectName("YCbCrButton")
        self.verticalLayout.addWidget(self.YCbCrButton)
        self.YUVButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.YUVButton.setObjectName("YUVButton")
        self.verticalLayout.addWidget(self.YUVButton)
        self.Logo = QtWidgets.QGroupBox(self.tab_1)
        self.Logo.setGeometry(QtCore.QRect(260, 30, 181, 121))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Logo.setPalette(palette)
        self.Logo.setObjectName("Logo")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.Logo)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(10, 30, 160, 81))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.SelectLogoButton = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.SelectLogoButton.setObjectName("SelectLogoButton")
        self.verticalLayout_2.addWidget(self.SelectLogoButton)
        self.AddLogoButton = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.AddLogoButton.setObjectName("AddLogoButton")
        self.verticalLayout_2.addWidget(self.AddLogoButton)
        self.AddNoise = QtWidgets.QGroupBox(self.tab_1)
        self.AddNoise.setGeometry(QtCore.QRect(260, 160, 181, 121))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.AddNoise.setPalette(palette)
        self.AddNoise.setObjectName("AddNoise")
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.AddNoise)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(10, 70, 161, 41))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.SaltnPepperButton = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.SaltnPepperButton.setObjectName("SaltnPepperButton")
        self.verticalLayout_3.addWidget(self.SaltnPepperButton)
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.AddNoise)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(10, 30, 161, 41))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.NoiseDensityEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        self.NoiseDensityEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.NoiseDensityEdit.setObjectName("NoiseDensityEdit")
        self.horizontalLayout_3.addWidget(self.NoiseDensityEdit)
        self.TabWidget.addTab(self.tab_1, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.Blur = QtWidgets.QGroupBox(self.tab_2)
        self.Blur.setGeometry(QtCore.QRect(270, 20, 181, 271))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Blur.setPalette(palette)
        self.Blur.setObjectName("Blur")
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.Blur)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(10, 60, 161, 131))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.AveragingButton = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        self.AveragingButton.setObjectName("AveragingButton")
        self.verticalLayout_4.addWidget(self.AveragingButton)
        self.MedianButton = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        self.MedianButton.setObjectName("MedianButton")
        self.verticalLayout_4.addWidget(self.MedianButton)
        self.GaussianBlurButton = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        self.GaussianBlurButton.setObjectName("GaussianBlurButton")
        self.verticalLayout_4.addWidget(self.GaussianBlurButton)
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(self.Blur)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(10, 30, 161, 31))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_6.addWidget(self.label_3)
        self.BlurKernelEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_4)
        self.BlurKernelEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.BlurKernelEdit.setObjectName("BlurKernelEdit")
        self.horizontalLayout_6.addWidget(self.BlurKernelEdit)
        self.horizontalLayoutWidget_9 = QtWidgets.QWidget(self.Blur)
        self.horizontalLayoutWidget_9.setGeometry(QtCore.QRect(10, 190, 161, 31))
        self.horizontalLayoutWidget_9.setObjectName("horizontalLayoutWidget_9")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_9)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_9 = QtWidgets.QLabel(self.horizontalLayoutWidget_9)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_10.addWidget(self.label_9)
        self.BilatSigmaEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_9)
        self.BilatSigmaEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.BilatSigmaEdit.setObjectName("BilatSigmaEdit")
        self.horizontalLayout_10.addWidget(self.BilatSigmaEdit)
        self.verticalLayoutWidget_14 = QtWidgets.QWidget(self.Blur)
        self.verticalLayoutWidget_14.setGeometry(QtCore.QRect(10, 230, 160, 27))
        self.verticalLayoutWidget_14.setObjectName("verticalLayoutWidget_14")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_14)
        self.verticalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.BilateralButton = QtWidgets.QPushButton(self.verticalLayoutWidget_14)
        self.BilateralButton.setObjectName("BilateralButton")
        self.verticalLayout_14.addWidget(self.BilateralButton)
        self.Morphology = QtWidgets.QGroupBox(self.tab_2)
        self.Morphology.setGeometry(QtCore.QRect(40, 20, 181, 271))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Morphology.setPalette(palette)
        self.Morphology.setObjectName("Morphology")
        self.verticalLayoutWidget_5 = QtWidgets.QWidget(self.Morphology)
        self.verticalLayoutWidget_5.setGeometry(QtCore.QRect(10, 60, 160, 211))
        self.verticalLayoutWidget_5.setObjectName("verticalLayoutWidget_5")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_5)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.DilationButton = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.DilationButton.setObjectName("DilationButton")
        self.verticalLayout_5.addWidget(self.DilationButton)
        self.ErosionButton = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.ErosionButton.setObjectName("ErosionButton")
        self.verticalLayout_5.addWidget(self.ErosionButton)
        self.OpeningButton = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.OpeningButton.setObjectName("OpeningButton")
        self.verticalLayout_5.addWidget(self.OpeningButton)
        self.ClosingButton = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.ClosingButton.setObjectName("ClosingButton")
        self.verticalLayout_5.addWidget(self.ClosingButton)
        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(self.Morphology)
        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(10, 30, 161, 31))
        self.horizontalLayoutWidget_5.setObjectName("horizontalLayoutWidget_5")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget_5)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_7.addWidget(self.label_4)
        self.MorphoKernelEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_5)
        self.MorphoKernelEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.MorphoKernelEdit.setObjectName("MorphoKernelEdit")
        self.horizontalLayout_7.addWidget(self.MorphoKernelEdit)
        self.TabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.Gradient = QtWidgets.QGroupBox(self.tab_3)
        self.Gradient.setGeometry(QtCore.QRect(270, 0, 181, 91))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Gradient.setPalette(palette)
        self.Gradient.setObjectName("Gradient")
        self.verticalLayoutWidget_6 = QtWidgets.QWidget(self.Gradient)
        self.verticalLayoutWidget_6.setGeometry(QtCore.QRect(10, 30, 160, 58))
        self.verticalLayoutWidget_6.setObjectName("verticalLayoutWidget_6")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_6)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.SobelButton = QtWidgets.QPushButton(self.verticalLayoutWidget_6)
        self.SobelButton.setObjectName("SobelButton")
        self.verticalLayout_6.addWidget(self.SobelButton)
        self.LaplacianButton = QtWidgets.QPushButton(self.verticalLayoutWidget_6)
        self.LaplacianButton.setObjectName("LaplacianButton")
        self.verticalLayout_6.addWidget(self.LaplacianButton)
        self.Histogram = QtWidgets.QGroupBox(self.tab_3)
        self.Histogram.setGeometry(QtCore.QRect(40, 0, 181, 101))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Histogram.setPalette(palette)
        self.Histogram.setObjectName("Histogram")
        self.verticalLayoutWidget_12 = QtWidgets.QWidget(self.Histogram)
        self.verticalLayoutWidget_12.setGeometry(QtCore.QRect(10, 30, 160, 61))
        self.verticalLayoutWidget_12.setObjectName("verticalLayoutWidget_12")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_12)
        self.verticalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.ComputeHistogramButton = QtWidgets.QPushButton(self.verticalLayoutWidget_12)
        self.ComputeHistogramButton.setObjectName("ComputeHistogramButton")
        self.verticalLayout_12.addWidget(self.ComputeHistogramButton)
        self.EqualizeHistogramButton = QtWidgets.QPushButton(self.verticalLayoutWidget_12)
        self.EqualizeHistogramButton.setObjectName("EqualizeHistogramButton")
        self.verticalLayout_12.addWidget(self.EqualizeHistogramButton)
        self.HoughTransform = QtWidgets.QGroupBox(self.tab_3)
        self.HoughTransform.setGeometry(QtCore.QRect(40, 110, 181, 191))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.HoughTransform.setPalette(palette)
        self.HoughTransform.setObjectName("HoughTransform")
        self.verticalLayoutWidget_7 = QtWidgets.QWidget(self.HoughTransform)
        self.verticalLayoutWidget_7.setGeometry(QtCore.QRect(10, 150, 160, 31))
        self.verticalLayoutWidget_7.setObjectName("verticalLayoutWidget_7")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_7)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.HoughCirclesButton = QtWidgets.QPushButton(self.verticalLayoutWidget_7)
        self.HoughCirclesButton.setObjectName("HoughCirclesButton")
        self.verticalLayout_7.addWidget(self.HoughCirclesButton)
        self.horizontalLayoutWidget_8 = QtWidgets.QWidget(self.HoughTransform)
        self.horizontalLayoutWidget_8.setGeometry(QtCore.QRect(10, 30, 161, 31))
        self.horizontalLayoutWidget_8.setObjectName("horizontalLayoutWidget_8")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_8)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_7 = QtWidgets.QLabel(self.horizontalLayoutWidget_8)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_8.addWidget(self.label_7)
        self.HoughLineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_8)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.HoughLineEdit.setPalette(palette)
        self.HoughLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.HoughLineEdit.setObjectName("HoughLineEdit")
        self.horizontalLayout_8.addWidget(self.HoughLineEdit)
        self.verticalLayoutWidget_13 = QtWidgets.QWidget(self.HoughTransform)
        self.verticalLayoutWidget_13.setGeometry(QtCore.QRect(10, 60, 161, 31))
        self.verticalLayoutWidget_13.setObjectName("verticalLayoutWidget_13")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_13)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.HoughLinesButton = QtWidgets.QPushButton(self.verticalLayoutWidget_13)
        self.HoughLinesButton.setObjectName("HoughLinesButton")
        self.verticalLayout_11.addWidget(self.HoughLinesButton)
        self.horizontalLayoutWidget_10 = QtWidgets.QWidget(self.HoughTransform)
        self.horizontalLayoutWidget_10.setGeometry(QtCore.QRect(10, 90, 161, 31))
        self.horizontalLayoutWidget_10.setObjectName("horizontalLayoutWidget_10")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_10)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_10 = QtWidgets.QLabel(self.horizontalLayoutWidget_10)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_11.addWidget(self.label_10)
        self.HoughCircleMinEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_10)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.HoughCircleMinEdit.setPalette(palette)
        self.HoughCircleMinEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.HoughCircleMinEdit.setObjectName("HoughCircleMinEdit")
        self.horizontalLayout_11.addWidget(self.HoughCircleMinEdit)
        self.horizontalLayoutWidget_11 = QtWidgets.QWidget(self.HoughTransform)
        self.horizontalLayoutWidget_11.setGeometry(QtCore.QRect(10, 120, 161, 27))
        self.horizontalLayoutWidget_11.setObjectName("horizontalLayoutWidget_11")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_11)
        self.horizontalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_11 = QtWidgets.QLabel(self.horizontalLayoutWidget_11)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_12.addWidget(self.label_11)
        self.HoughCircleMaxEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_11)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.HoughCircleMaxEdit.setPalette(palette)
        self.HoughCircleMaxEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.HoughCircleMaxEdit.setObjectName("HoughCircleMaxEdit")
        self.horizontalLayout_12.addWidget(self.HoughCircleMaxEdit)
        self.Edge = QtWidgets.QGroupBox(self.tab_3)
        self.Edge.setGeometry(QtCore.QRect(270, 100, 181, 131))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Edge.setPalette(palette)
        self.Edge.setObjectName("Edge")
        self.verticalLayoutWidget_10 = QtWidgets.QWidget(self.Edge)
        self.verticalLayoutWidget_10.setGeometry(QtCore.QRect(10, 90, 161, 31))
        self.verticalLayoutWidget_10.setObjectName("verticalLayoutWidget_10")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_10)
        self.verticalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.CannyButton = QtWidgets.QPushButton(self.verticalLayoutWidget_10)
        self.CannyButton.setObjectName("CannyButton")
        self.verticalLayout_13.addWidget(self.CannyButton)
        self.horizontalLayoutWidget_6 = QtWidgets.QWidget(self.Edge)
        self.horizontalLayoutWidget_6.setGeometry(QtCore.QRect(10, 30, 161, 31))
        self.horizontalLayoutWidget_6.setObjectName("horizontalLayoutWidget_6")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_6)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_5 = QtWidgets.QLabel(self.horizontalLayoutWidget_6)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_4.addWidget(self.label_5)
        self.CannyMinEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_6)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.CannyMinEdit.setPalette(palette)
        self.CannyMinEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.CannyMinEdit.setObjectName("CannyMinEdit")
        self.horizontalLayout_4.addWidget(self.CannyMinEdit)
        self.horizontalLayoutWidget_7 = QtWidgets.QWidget(self.Edge)
        self.horizontalLayoutWidget_7.setGeometry(QtCore.QRect(10, 60, 161, 31))
        self.horizontalLayoutWidget_7.setObjectName("horizontalLayoutWidget_7")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_7)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_6 = QtWidgets.QLabel(self.horizontalLayoutWidget_7)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_5.addWidget(self.label_6)
        self.CannyMaxEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_7)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.CannyMaxEdit.setPalette(palette)
        self.CannyMaxEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.CannyMaxEdit.setObjectName("CannyMaxEdit")
        self.horizontalLayout_5.addWidget(self.CannyMaxEdit)
        self.CornerDetection = QtWidgets.QGroupBox(self.tab_3)
        self.CornerDetection.setGeometry(QtCore.QRect(270, 240, 181, 71))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.CornerDetection.setPalette(palette)
        self.CornerDetection.setObjectName("CornerDetection")
        self.verticalLayoutWidget_27 = QtWidgets.QWidget(self.CornerDetection)
        self.verticalLayoutWidget_27.setGeometry(QtCore.QRect(10, 30, 160, 31))
        self.verticalLayoutWidget_27.setObjectName("verticalLayoutWidget_27")
        self.verticalLayout_27 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_27)
        self.verticalLayout_27.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.HarrisCornerButton = QtWidgets.QPushButton(self.verticalLayoutWidget_27)
        self.HarrisCornerButton.setObjectName("HarrisCornerButton")
        self.verticalLayout_27.addWidget(self.HarrisCornerButton)
        self.TabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.ShapeDescriptors = QtWidgets.QGroupBox(self.tab_4)
        self.ShapeDescriptors.setGeometry(QtCore.QRect(40, 10, 181, 141))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.ShapeDescriptors.setPalette(palette)
        self.ShapeDescriptors.setObjectName("ShapeDescriptors")
        self.verticalLayoutWidget_8 = QtWidgets.QWidget(self.ShapeDescriptors)
        self.verticalLayoutWidget_8.setGeometry(QtCore.QRect(10, 30, 160, 101))
        self.verticalLayoutWidget_8.setObjectName("verticalLayoutWidget_8")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_8)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.ShowContoursButton = QtWidgets.QPushButton(self.verticalLayoutWidget_8)
        self.ShowContoursButton.setObjectName("ShowContoursButton")
        self.verticalLayout_8.addWidget(self.ShowContoursButton)
        self.BoundingBoxButton = QtWidgets.QPushButton(self.verticalLayoutWidget_8)
        self.BoundingBoxButton.setObjectName("BoundingBoxButton")
        self.verticalLayout_8.addWidget(self.BoundingBoxButton)
        self.EnclosingCircleButton = QtWidgets.QPushButton(self.verticalLayoutWidget_8)
        self.EnclosingCircleButton.setObjectName("EnclosingCircleButton")
        self.verticalLayout_8.addWidget(self.EnclosingCircleButton)
        self.FeatureExtraction = QtWidgets.QGroupBox(self.tab_4)
        self.FeatureExtraction.setGeometry(QtCore.QRect(40, 160, 181, 141))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.FeatureExtraction.setPalette(palette)
        self.FeatureExtraction.setObjectName("FeatureExtraction")
        self.verticalLayoutWidget_9 = QtWidgets.QWidget(self.FeatureExtraction)
        self.verticalLayoutWidget_9.setGeometry(QtCore.QRect(10, 30, 160, 101))
        self.verticalLayoutWidget_9.setObjectName("verticalLayoutWidget_9")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_9)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.FASTButton = QtWidgets.QPushButton(self.verticalLayoutWidget_9)
        self.FASTButton.setObjectName("FASTButton")
        self.verticalLayout_9.addWidget(self.FASTButton)
        self.SURFButton = QtWidgets.QPushButton(self.verticalLayoutWidget_9)
        self.SURFButton.setObjectName("SURFButton")
        self.verticalLayout_9.addWidget(self.SURFButton)
        self.SIFTButton = QtWidgets.QPushButton(self.verticalLayoutWidget_9)
        self.SIFTButton.setObjectName("SIFTButton")
        self.verticalLayout_9.addWidget(self.SIFTButton)
        self.FeatureMatching = QtWidgets.QGroupBox(self.tab_4)
        self.FeatureMatching.setGeometry(QtCore.QRect(260, 20, 191, 281))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.FeatureMatching.setPalette(palette)
        self.FeatureMatching.setObjectName("FeatureMatching")
        self.verticalLayoutWidget_11 = QtWidgets.QWidget(self.FeatureMatching)
        self.verticalLayoutWidget_11.setGeometry(QtCore.QRect(10, 20, 171, 111))
        self.verticalLayoutWidget_11.setObjectName("verticalLayoutWidget_11")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_11)
        self.verticalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.LoadMatchImage1Button = QtWidgets.QPushButton(self.verticalLayoutWidget_11)
        self.LoadMatchImage1Button.setObjectName("LoadMatchImage1Button")
        self.verticalLayout_10.addWidget(self.LoadMatchImage1Button)
        self.LoadMatchImage2Button = QtWidgets.QPushButton(self.verticalLayoutWidget_11)
        self.LoadMatchImage2Button.setObjectName("LoadMatchImage2Button")
        self.verticalLayout_10.addWidget(self.LoadMatchImage2Button)
        self.horizontalLayoutWidget_12 = QtWidgets.QWidget(self.FeatureMatching)
        self.horizontalLayoutWidget_12.setGeometry(QtCore.QRect(10, 130, 171, 41))
        self.horizontalLayoutWidget_12.setObjectName("horizontalLayoutWidget_12")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_12)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_8 = QtWidgets.QLabel(self.horizontalLayoutWidget_12)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_9.addWidget(self.label_8)
        self.BruteForceEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_12)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.BruteForceEdit.setPalette(palette)
        self.BruteForceEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.BruteForceEdit.setObjectName("BruteForceEdit")
        self.horizontalLayout_9.addWidget(self.BruteForceEdit)
        self.verticalLayoutWidget_15 = QtWidgets.QWidget(self.FeatureMatching)
        self.verticalLayoutWidget_15.setGeometry(QtCore.QRect(10, 179, 171, 101))
        self.verticalLayoutWidget_15.setObjectName("verticalLayoutWidget_15")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_15)
        self.verticalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.BruteFroceMatchButton = QtWidgets.QPushButton(self.verticalLayoutWidget_15)
        self.BruteFroceMatchButton.setObjectName("BruteFroceMatchButton")
        self.verticalLayout_15.addWidget(self.BruteFroceMatchButton)
        self.BruteFroceSIFTButton = QtWidgets.QPushButton(self.verticalLayoutWidget_15)
        self.BruteFroceSIFTButton.setObjectName("BruteFroceSIFTButton")
        self.verticalLayout_15.addWidget(self.BruteFroceSIFTButton)
        self.TabWidget.addTab(self.tab_4, "")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.IPTools)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(110, 10, 301, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.LoadImageButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(46, 52, 54))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(46, 52, 54))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(46, 52, 54))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(46, 52, 54))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.LoadImageButton.setPalette(palette)
        self.LoadImageButton.setObjectName("LoadImageButton")
        self.horizontalLayout.addWidget(self.LoadImageButton)
        self.CaptureImageButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.CaptureImageButton.setPalette(palette)
        self.CaptureImageButton.setObjectName("CaptureImageButton")
        self.horizontalLayout.addWidget(self.CaptureImageButton)
        self.toolBox.addItem(self.IPTools, "")
        self.VPTools = QtWidgets.QWidget()
        self.VPTools.setGeometry(QtCore.QRect(0, 0, 531, 428))
        self.VPTools.setObjectName("VPTools")
        self.TabWidget_2 = QtWidgets.QTabWidget(self.VPTools)
        self.TabWidget_2.setGeometry(QtCore.QRect(20, 60, 491, 351))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.TabWidget_2.setPalette(palette)
        self.TabWidget_2.setObjectName("TabWidget_2")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setAccessibleName("")
        self.tab_5.setObjectName("tab_5")
        self.ColorSpaces_Video = QtWidgets.QGroupBox(self.tab_5)
        self.ColorSpaces_Video.setGeometry(QtCore.QRect(40, 10, 181, 191))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.ColorSpaces_Video.setPalette(palette)
        self.ColorSpaces_Video.setObjectName("ColorSpaces_Video")
        self.verticalLayoutWidget_16 = QtWidgets.QWidget(self.ColorSpaces_Video)
        self.verticalLayoutWidget_16.setGeometry(QtCore.QRect(10, 30, 160, 151))
        self.verticalLayoutWidget_16.setObjectName("verticalLayoutWidget_16")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_16)
        self.verticalLayout_16.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.GrayButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_16)
        self.GrayButton_Video.setObjectName("GrayButton_Video")
        self.verticalLayout_16.addWidget(self.GrayButton_Video)
        self.HSVButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_16)
        self.HSVButton_Video.setObjectName("HSVButton_Video")
        self.verticalLayout_16.addWidget(self.HSVButton_Video)
        self.YCbCrButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_16)
        self.YCbCrButton_Video.setObjectName("YCbCrButton_Video")
        self.verticalLayout_16.addWidget(self.YCbCrButton_Video)
        self.YUVButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_16)
        self.YUVButton_Video.setObjectName("YUVButton_Video")
        self.verticalLayout_16.addWidget(self.YUVButton_Video)
        self.AddNoise_Video = QtWidgets.QGroupBox(self.tab_5)
        self.AddNoise_Video.setGeometry(QtCore.QRect(260, 170, 181, 121))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.AddNoise_Video.setPalette(palette)
        self.AddNoise_Video.setObjectName("AddNoise_Video")
        self.verticalLayoutWidget_18 = QtWidgets.QWidget(self.AddNoise_Video)
        self.verticalLayoutWidget_18.setGeometry(QtCore.QRect(10, 70, 161, 41))
        self.verticalLayoutWidget_18.setObjectName("verticalLayoutWidget_18")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_18)
        self.verticalLayout_18.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.SaltnPepperButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_18)
        self.SaltnPepperButton_Video.setObjectName("SaltnPepperButton_Video")
        self.verticalLayout_18.addWidget(self.SaltnPepperButton_Video)
        self.horizontalLayoutWidget_13 = QtWidgets.QWidget(self.AddNoise_Video)
        self.horizontalLayoutWidget_13.setGeometry(QtCore.QRect(10, 30, 161, 41))
        self.horizontalLayoutWidget_13.setObjectName("horizontalLayoutWidget_13")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_13)
        self.horizontalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.label_12 = QtWidgets.QLabel(self.horizontalLayoutWidget_13)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_13.addWidget(self.label_12)
        self.NoiseDensityEdit_Video = QtWidgets.QLineEdit(self.horizontalLayoutWidget_13)
        self.NoiseDensityEdit_Video.setAlignment(QtCore.Qt.AlignCenter)
        self.NoiseDensityEdit_Video.setObjectName("NoiseDensityEdit_Video")
        self.horizontalLayout_13.addWidget(self.NoiseDensityEdit_Video)
        self.Edge_Video = QtWidgets.QGroupBox(self.tab_5)
        self.Edge_Video.setGeometry(QtCore.QRect(260, 20, 181, 131))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Edge_Video.setPalette(palette)
        self.Edge_Video.setObjectName("Edge_Video")
        self.verticalLayoutWidget_26 = QtWidgets.QWidget(self.Edge_Video)
        self.verticalLayoutWidget_26.setGeometry(QtCore.QRect(10, 90, 161, 31))
        self.verticalLayoutWidget_26.setObjectName("verticalLayoutWidget_26")
        self.verticalLayout_26 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_26)
        self.verticalLayout_26.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.CannyButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_26)
        self.CannyButton_Video.setObjectName("CannyButton_Video")
        self.verticalLayout_26.addWidget(self.CannyButton_Video)
        self.horizontalLayoutWidget_20 = QtWidgets.QWidget(self.Edge_Video)
        self.horizontalLayoutWidget_20.setGeometry(QtCore.QRect(10, 30, 161, 31))
        self.horizontalLayoutWidget_20.setObjectName("horizontalLayoutWidget_20")
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_20)
        self.horizontalLayout_20.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.label_19 = QtWidgets.QLabel(self.horizontalLayoutWidget_20)
        self.label_19.setObjectName("label_19")
        self.horizontalLayout_20.addWidget(self.label_19)
        self.CannyMinEdit_Video = QtWidgets.QLineEdit(self.horizontalLayoutWidget_20)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.CannyMinEdit_Video.setPalette(palette)
        self.CannyMinEdit_Video.setAlignment(QtCore.Qt.AlignCenter)
        self.CannyMinEdit_Video.setObjectName("CannyMinEdit_Video")
        self.horizontalLayout_20.addWidget(self.CannyMinEdit_Video)
        self.horizontalLayoutWidget_21 = QtWidgets.QWidget(self.Edge_Video)
        self.horizontalLayoutWidget_21.setGeometry(QtCore.QRect(10, 60, 161, 31))
        self.horizontalLayoutWidget_21.setObjectName("horizontalLayoutWidget_21")
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_21)
        self.horizontalLayout_21.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.label_20 = QtWidgets.QLabel(self.horizontalLayoutWidget_21)
        self.label_20.setObjectName("label_20")
        self.horizontalLayout_21.addWidget(self.label_20)
        self.CannyMaxEdit_Video = QtWidgets.QLineEdit(self.horizontalLayoutWidget_21)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.CannyMaxEdit_Video.setPalette(palette)
        self.CannyMaxEdit_Video.setAlignment(QtCore.Qt.AlignCenter)
        self.CannyMaxEdit_Video.setObjectName("CannyMaxEdit_Video")
        self.horizontalLayout_21.addWidget(self.CannyMaxEdit_Video)
        self.Histogram_Video = QtWidgets.QGroupBox(self.tab_5)
        self.Histogram_Video.setGeometry(QtCore.QRect(40, 210, 181, 81))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Histogram_Video.setPalette(palette)
        self.Histogram_Video.setObjectName("Histogram_Video")
        self.verticalLayoutWidget_17 = QtWidgets.QWidget(self.Histogram_Video)
        self.verticalLayoutWidget_17.setGeometry(QtCore.QRect(10, 30, 160, 41))
        self.verticalLayoutWidget_17.setObjectName("verticalLayoutWidget_17")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_17)
        self.verticalLayout_17.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.EqualizeHistogramButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_17)
        self.EqualizeHistogramButton_Video.setObjectName("EqualizeHistogramButton_Video")
        self.verticalLayout_17.addWidget(self.EqualizeHistogramButton_Video)
        self.TabWidget_2.addTab(self.tab_5, "")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.Blur_Video = QtWidgets.QGroupBox(self.tab_6)
        self.Blur_Video.setGeometry(QtCore.QRect(270, 20, 181, 271))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Blur_Video.setPalette(palette)
        self.Blur_Video.setObjectName("Blur_Video")
        self.verticalLayoutWidget_19 = QtWidgets.QWidget(self.Blur_Video)
        self.verticalLayoutWidget_19.setGeometry(QtCore.QRect(10, 60, 161, 131))
        self.verticalLayoutWidget_19.setObjectName("verticalLayoutWidget_19")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_19)
        self.verticalLayout_19.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.AveragingButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_19)
        self.AveragingButton_Video.setObjectName("AveragingButton_Video")
        self.verticalLayout_19.addWidget(self.AveragingButton_Video)
        self.MedianButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_19)
        self.MedianButton_Video.setObjectName("MedianButton_Video")
        self.verticalLayout_19.addWidget(self.MedianButton_Video)
        self.GaussianBlurButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_19)
        self.GaussianBlurButton_Video.setObjectName("GaussianBlurButton_Video")
        self.verticalLayout_19.addWidget(self.GaussianBlurButton_Video)
        self.horizontalLayoutWidget_14 = QtWidgets.QWidget(self.Blur_Video)
        self.horizontalLayoutWidget_14.setGeometry(QtCore.QRect(10, 30, 161, 31))
        self.horizontalLayoutWidget_14.setObjectName("horizontalLayoutWidget_14")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_14)
        self.horizontalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.label_13 = QtWidgets.QLabel(self.horizontalLayoutWidget_14)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_14.addWidget(self.label_13)
        self.BlurKernelEdit_Video = QtWidgets.QLineEdit(self.horizontalLayoutWidget_14)
        self.BlurKernelEdit_Video.setAlignment(QtCore.Qt.AlignCenter)
        self.BlurKernelEdit_Video.setObjectName("BlurKernelEdit_Video")
        self.horizontalLayout_14.addWidget(self.BlurKernelEdit_Video)
        self.horizontalLayoutWidget_15 = QtWidgets.QWidget(self.Blur_Video)
        self.horizontalLayoutWidget_15.setGeometry(QtCore.QRect(10, 190, 161, 31))
        self.horizontalLayoutWidget_15.setObjectName("horizontalLayoutWidget_15")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_15)
        self.horizontalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.label_14 = QtWidgets.QLabel(self.horizontalLayoutWidget_15)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_15.addWidget(self.label_14)
        self.BilatSigmaEdit_Video = QtWidgets.QLineEdit(self.horizontalLayoutWidget_15)
        self.BilatSigmaEdit_Video.setAlignment(QtCore.Qt.AlignCenter)
        self.BilatSigmaEdit_Video.setObjectName("BilatSigmaEdit_Video")
        self.horizontalLayout_15.addWidget(self.BilatSigmaEdit_Video)
        self.verticalLayoutWidget_20 = QtWidgets.QWidget(self.Blur_Video)
        self.verticalLayoutWidget_20.setGeometry(QtCore.QRect(10, 230, 160, 27))
        self.verticalLayoutWidget_20.setObjectName("verticalLayoutWidget_20")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_20)
        self.verticalLayout_20.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.BilateralButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_20)
        self.BilateralButton_Video.setObjectName("BilateralButton_Video")
        self.verticalLayout_20.addWidget(self.BilateralButton_Video)
        self.Morphology_Video = QtWidgets.QGroupBox(self.tab_6)
        self.Morphology_Video.setGeometry(QtCore.QRect(40, 20, 181, 271))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Morphology_Video.setPalette(palette)
        self.Morphology_Video.setObjectName("Morphology_Video")
        self.verticalLayoutWidget_21 = QtWidgets.QWidget(self.Morphology_Video)
        self.verticalLayoutWidget_21.setGeometry(QtCore.QRect(10, 60, 161, 211))
        self.verticalLayoutWidget_21.setObjectName("verticalLayoutWidget_21")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_21)
        self.verticalLayout_21.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.DilationButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_21)
        self.DilationButton_Video.setObjectName("DilationButton_Video")
        self.verticalLayout_21.addWidget(self.DilationButton_Video)
        self.ErosionButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_21)
        self.ErosionButton_Video.setObjectName("ErosionButton_Video")
        self.verticalLayout_21.addWidget(self.ErosionButton_Video)
        self.OpeningButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_21)
        self.OpeningButton_Video.setObjectName("OpeningButton_Video")
        self.verticalLayout_21.addWidget(self.OpeningButton_Video)
        self.ClosingButton_Video = QtWidgets.QPushButton(self.verticalLayoutWidget_21)
        self.ClosingButton_Video.setObjectName("ClosingButton_Video")
        self.verticalLayout_21.addWidget(self.ClosingButton_Video)
        self.horizontalLayoutWidget_16 = QtWidgets.QWidget(self.Morphology_Video)
        self.horizontalLayoutWidget_16.setGeometry(QtCore.QRect(10, 30, 161, 31))
        self.horizontalLayoutWidget_16.setObjectName("horizontalLayoutWidget_16")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_16)
        self.horizontalLayout_16.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.label_15 = QtWidgets.QLabel(self.horizontalLayoutWidget_16)
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_16.addWidget(self.label_15)
        self.MorphoKernelEdit_Video = QtWidgets.QLineEdit(self.horizontalLayoutWidget_16)
        self.MorphoKernelEdit_Video.setAlignment(QtCore.Qt.AlignCenter)
        self.MorphoKernelEdit_Video.setObjectName("MorphoKernelEdit_Video")
        self.horizontalLayout_16.addWidget(self.MorphoKernelEdit_Video)
        self.TabWidget_2.addTab(self.tab_6, "")
        self.label_16 = QtWidgets.QLabel(self.VPTools)
        self.label_16.setGeometry(QtCore.QRect(60, 0, 411, 41))
        self.label_16.setTextFormat(QtCore.Qt.RichText)
        self.label_16.setAlignment(QtCore.Qt.AlignCenter)
        self.label_16.setObjectName("label_16")
        self.toolBox.addItem(self.VPTools, "")
        self.CVTools = QtWidgets.QWidget()
        self.CVTools.setGeometry(QtCore.QRect(0, 0, 531, 428))
        self.CVTools.setObjectName("CVTools")
        self.TabWidget_3 = QtWidgets.QTabWidget(self.CVTools)
        self.TabWidget_3.setGeometry(QtCore.QRect(20, 20, 491, 371))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(246, 246, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(159, 159, 157))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(119, 119, 118))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.TabWidget_3.setPalette(palette)
        self.TabWidget_3.setObjectName("TabWidget_3")
        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setAccessibleName("")
        self.tab_7.setObjectName("tab_7")
        self.Calibration = QtWidgets.QGroupBox(self.tab_7)
        self.Calibration.setGeometry(QtCore.QRect(10, 20, 181, 261))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Calibration.setPalette(palette)
        self.Calibration.setObjectName("Calibration")
        self.verticalLayoutWidget_22 = QtWidgets.QWidget(self.Calibration)
        self.verticalLayoutWidget_22.setGeometry(QtCore.QRect(10, 210, 161, 41))
        self.verticalLayoutWidget_22.setObjectName("verticalLayoutWidget_22")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_22)
        self.verticalLayout_22.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.CalibrateButton = QtWidgets.QPushButton(self.verticalLayoutWidget_22)
        self.CalibrateButton.setObjectName("CalibrateButton")
        self.verticalLayout_22.addWidget(self.CalibrateButton)
        self.horizontalLayoutWidget_25 = QtWidgets.QWidget(self.Calibration)
        self.horizontalLayoutWidget_25.setGeometry(QtCore.QRect(10, 140, 161, 31))
        self.horizontalLayoutWidget_25.setObjectName("horizontalLayoutWidget_25")
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_25)
        self.horizontalLayout_25.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.label_25 = QtWidgets.QLabel(self.horizontalLayoutWidget_25)
        self.label_25.setObjectName("label_25")
        self.horizontalLayout_25.addWidget(self.label_25)
        self.CalibRowsEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_25)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.CalibRowsEdit.setPalette(palette)
        self.CalibRowsEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.CalibRowsEdit.setObjectName("CalibRowsEdit")
        self.horizontalLayout_25.addWidget(self.CalibRowsEdit)
        self.horizontalLayoutWidget_26 = QtWidgets.QWidget(self.Calibration)
        self.horizontalLayoutWidget_26.setGeometry(QtCore.QRect(10, 170, 161, 31))
        self.horizontalLayoutWidget_26.setObjectName("horizontalLayoutWidget_26")
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_26)
        self.horizontalLayout_26.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.label_26 = QtWidgets.QLabel(self.horizontalLayoutWidget_26)
        self.label_26.setObjectName("label_26")
        self.horizontalLayout_26.addWidget(self.label_26)
        self.CalibColumnEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_26)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.CalibColumnEdit.setPalette(palette)
        self.CalibColumnEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.CalibColumnEdit.setObjectName("CalibColumnEdit")
        self.horizontalLayout_26.addWidget(self.CalibColumnEdit)
        self.verticalLayoutWidget_31 = QtWidgets.QWidget(self.Calibration)
        self.verticalLayoutWidget_31.setGeometry(QtCore.QRect(10, 30, 161, 91))
        self.verticalLayoutWidget_31.setObjectName("verticalLayoutWidget_31")
        self.verticalLayout_31 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_31)
        self.verticalLayout_31.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_31.setObjectName("verticalLayout_31")
        self.CalibLoadImagesButton = QtWidgets.QPushButton(self.verticalLayoutWidget_31)
        self.CalibLoadImagesButton.setObjectName("CalibLoadImagesButton")
        self.verticalLayout_31.addWidget(self.CalibLoadImagesButton)
        self.CalibCaptureImagesButton = QtWidgets.QPushButton(self.verticalLayoutWidget_31)
        self.CalibCaptureImagesButton.setObjectName("CalibCaptureImagesButton")
        self.verticalLayout_31.addWidget(self.CalibCaptureImagesButton)
        self.label_27 = QtWidgets.QLabel(self.Calibration)
        self.label_27.setGeometry(QtCore.QRect(10, 120, 159, 27))
        self.label_27.setAlignment(QtCore.Qt.AlignCenter)
        self.label_27.setObjectName("label_27")
        self.Undistort = QtWidgets.QGroupBox(self.tab_7)
        self.Undistort.setGeometry(QtCore.QRect(260, 30, 181, 121))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(173, 127, 168))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Undistort.setPalette(palette)
        self.Undistort.setObjectName("Undistort")
        self.verticalLayoutWidget_24 = QtWidgets.QWidget(self.Undistort)
        self.verticalLayoutWidget_24.setGeometry(QtCore.QRect(10, 30, 160, 81))
        self.verticalLayoutWidget_24.setObjectName("verticalLayoutWidget_24")
        self.verticalLayout_24 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_24)
        self.verticalLayout_24.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.UndistortLoadImageButton = QtWidgets.QPushButton(self.verticalLayoutWidget_24)
        self.UndistortLoadImageButton.setObjectName("UndistortLoadImageButton")
        self.verticalLayout_24.addWidget(self.UndistortLoadImageButton)
        self.UndistortButton = QtWidgets.QPushButton(self.verticalLayoutWidget_24)
        self.UndistortButton.setObjectName("UndistortButton")
        self.verticalLayout_24.addWidget(self.UndistortButton)
        self.CameraMatrix = QtWidgets.QGroupBox(self.tab_7)
        self.CameraMatrix.setGeometry(QtCore.QRect(210, 170, 261, 131))
        self.CameraMatrix.setObjectName("CameraMatrix")
        self.gridLayoutWidget_3 = QtWidgets.QWidget(self.CameraMatrix)
        self.gridLayoutWidget_3.setGeometry(QtCore.QRect(10, 30, 241, 89))
        self.gridLayoutWidget_3.setObjectName("gridLayoutWidget_3")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.gridLayoutWidget_3)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.C4Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_3)
        self.C4Edit.setObjectName("C4Edit")
        self.gridLayout_3.addWidget(self.C4Edit, 2, 0, 1, 1)
        self.C2Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_3)
        self.C2Edit.setObjectName("C2Edit")
        self.gridLayout_3.addWidget(self.C2Edit, 0, 1, 1, 1)
        self.C3Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_3)
        self.C3Edit.setObjectName("C3Edit")
        self.gridLayout_3.addWidget(self.C3Edit, 0, 2, 1, 1)
        self.C1Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_3)
        self.C1Edit.setText("")
        self.C1Edit.setObjectName("C1Edit")
        self.gridLayout_3.addWidget(self.C1Edit, 0, 0, 1, 1)
        self.C7Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_3)
        self.C7Edit.setObjectName("C7Edit")
        self.gridLayout_3.addWidget(self.C7Edit, 3, 0, 1, 1)
        self.C9Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_3)
        self.C9Edit.setObjectName("C9Edit")
        self.gridLayout_3.addWidget(self.C9Edit, 3, 2, 1, 1)
        self.C6Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_3)
        self.C6Edit.setObjectName("C6Edit")
        self.gridLayout_3.addWidget(self.C6Edit, 2, 2, 1, 1)
        self.C5Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_3)
        self.C5Edit.setObjectName("C5Edit")
        self.gridLayout_3.addWidget(self.C5Edit, 2, 1, 1, 1)
        self.C8Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_3)
        self.C8Edit.setObjectName("C8Edit")
        self.gridLayout_3.addWidget(self.C8Edit, 3, 1, 1, 1)
        self.TabWidget_3.addTab(self.tab_7, "")
        self.tab_9 = QtWidgets.QWidget()
        self.tab_9.setObjectName("tab_9")
        self.FundamentalMatrix = QtWidgets.QGroupBox(self.tab_9)
        self.FundamentalMatrix.setGeometry(QtCore.QRect(10, 20, 181, 281))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.FundamentalMatrix.setPalette(palette)
        self.FundamentalMatrix.setObjectName("FundamentalMatrix")
        self.verticalLayoutWidget_23 = QtWidgets.QWidget(self.FundamentalMatrix)
        self.verticalLayoutWidget_23.setGeometry(QtCore.QRect(10, 20, 161, 261))
        self.verticalLayoutWidget_23.setObjectName("verticalLayoutWidget_23")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_23)
        self.verticalLayout_23.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.FMLoadImage1Button = QtWidgets.QPushButton(self.verticalLayoutWidget_23)
        self.FMLoadImage1Button.setObjectName("FMLoadImage1Button")
        self.verticalLayout_23.addWidget(self.FMLoadImage1Button)
        self.FMLoadImage2Button = QtWidgets.QPushButton(self.verticalLayoutWidget_23)
        self.FMLoadImage2Button.setObjectName("FMLoadImage2Button")
        self.verticalLayout_23.addWidget(self.FMLoadImage2Button)
        self.FMCaptureImagesButton = QtWidgets.QPushButton(self.verticalLayoutWidget_23)
        self.FMCaptureImagesButton.setObjectName("FMCaptureImagesButton")
        self.verticalLayout_23.addWidget(self.FMCaptureImagesButton)
        self.FM7PointButton = QtWidgets.QRadioButton(self.verticalLayoutWidget_23)
        self.FM7PointButton.setChecked(True)
        self.FM7PointButton.setObjectName("FM7PointButton")
        self.verticalLayout_23.addWidget(self.FM7PointButton)
        self.FM8PointButton = QtWidgets.QRadioButton(self.verticalLayoutWidget_23)
        self.FM8PointButton.setObjectName("FM8PointButton")
        self.verticalLayout_23.addWidget(self.FM8PointButton)
        self.FMRANSACButton = QtWidgets.QRadioButton(self.verticalLayoutWidget_23)
        self.FMRANSACButton.setObjectName("FMRANSACButton")
        self.verticalLayout_23.addWidget(self.FMRANSACButton)
        self.FMComputeButton = QtWidgets.QPushButton(self.verticalLayoutWidget_23)
        self.FMComputeButton.setObjectName("FMComputeButton")
        self.verticalLayout_23.addWidget(self.FMComputeButton)
        self.FMatrix = QtWidgets.QGroupBox(self.tab_9)
        self.FMatrix.setGeometry(QtCore.QRect(210, 150, 261, 131))
        self.FMatrix.setObjectName("FMatrix")
        self.gridLayoutWidget = QtWidgets.QWidget(self.FMatrix)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 30, 241, 89))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.F4Edit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.F4Edit.setObjectName("F4Edit")
        self.gridLayout.addWidget(self.F4Edit, 2, 0, 1, 1)
        self.F2Edit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.F2Edit.setObjectName("F2Edit")
        self.gridLayout.addWidget(self.F2Edit, 0, 1, 1, 1)
        self.F3Edit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.F3Edit.setObjectName("F3Edit")
        self.gridLayout.addWidget(self.F3Edit, 0, 2, 1, 1)
        self.F1Edit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.F1Edit.setText("")
        self.F1Edit.setObjectName("F1Edit")
        self.gridLayout.addWidget(self.F1Edit, 0, 0, 1, 1)
        self.F7Edit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.F7Edit.setObjectName("F7Edit")
        self.gridLayout.addWidget(self.F7Edit, 3, 0, 1, 1)
        self.F9Edit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.F9Edit.setObjectName("F9Edit")
        self.gridLayout.addWidget(self.F9Edit, 3, 2, 1, 1)
        self.F6Edit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.F6Edit.setObjectName("F6Edit")
        self.gridLayout.addWidget(self.F6Edit, 2, 2, 1, 1)
        self.F5Edit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.F5Edit.setObjectName("F5Edit")
        self.gridLayout.addWidget(self.F5Edit, 2, 1, 1, 1)
        self.F8Edit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.F8Edit.setObjectName("F8Edit")
        self.gridLayout.addWidget(self.F8Edit, 3, 1, 1, 1)
        self.Epipolar = QtWidgets.QGroupBox(self.tab_9)
        self.Epipolar.setGeometry(QtCore.QRect(250, 60, 181, 61))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Epipolar.setPalette(palette)
        self.Epipolar.setObjectName("Epipolar")
        self.DrawEpipolarButton = QtWidgets.QPushButton(self.Epipolar)
        self.DrawEpipolarButton.setGeometry(QtCore.QRect(10, 30, 159, 25))
        self.DrawEpipolarButton.setObjectName("DrawEpipolarButton")
        self.TabWidget_3.addTab(self.tab_9, "")
        self.tab_8 = QtWidgets.QWidget()
        self.tab_8.setObjectName("tab_8")
        self.Stitching = QtWidgets.QGroupBox(self.tab_8)
        self.Stitching.setGeometry(QtCore.QRect(260, 10, 181, 151))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Stitching.setPalette(palette)
        self.Stitching.setObjectName("Stitching")
        self.verticalLayoutWidget_29 = QtWidgets.QWidget(self.Stitching)
        self.verticalLayoutWidget_29.setGeometry(QtCore.QRect(10, 30, 165, 111))
        self.verticalLayoutWidget_29.setObjectName("verticalLayoutWidget_29")
        self.verticalLayout_29 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_29)
        self.verticalLayout_29.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_29.setObjectName("verticalLayout_29")
        self.StitchLoadImagesButton = QtWidgets.QPushButton(self.verticalLayoutWidget_29)
        self.StitchLoadImagesButton.setObjectName("StitchLoadImagesButton")
        self.verticalLayout_29.addWidget(self.StitchLoadImagesButton)
        self.StitchCaptureImagesButton = QtWidgets.QPushButton(self.verticalLayoutWidget_29)
        self.StitchCaptureImagesButton.setObjectName("StitchCaptureImagesButton")
        self.verticalLayout_29.addWidget(self.StitchCaptureImagesButton)
        self.StitchImagesButton = QtWidgets.QPushButton(self.verticalLayoutWidget_29)
        self.StitchImagesButton.setObjectName("StitchImagesButton")
        self.verticalLayout_29.addWidget(self.StitchImagesButton)
        self.Homography = QtWidgets.QGroupBox(self.tab_8)
        self.Homography.setGeometry(QtCore.QRect(10, 30, 181, 271))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Homography.setPalette(palette)
        self.Homography.setObjectName("Homography")
        self.verticalLayoutWidget_28 = QtWidgets.QWidget(self.Homography)
        self.verticalLayoutWidget_28.setGeometry(QtCore.QRect(10, 20, 165, 251))
        self.verticalLayoutWidget_28.setObjectName("verticalLayoutWidget_28")
        self.verticalLayout_28 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_28)
        self.verticalLayout_28.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_28.setObjectName("verticalLayout_28")
        self.HMLoadImage1Button = QtWidgets.QPushButton(self.verticalLayoutWidget_28)
        self.HMLoadImage1Button.setObjectName("HMLoadImage1Button")
        self.verticalLayout_28.addWidget(self.HMLoadImage1Button)
        self.HMLoadImage2Button = QtWidgets.QPushButton(self.verticalLayoutWidget_28)
        self.HMLoadImage2Button.setObjectName("HMLoadImage2Button")
        self.verticalLayout_28.addWidget(self.HMLoadImage2Button)
        self.HMCaptureImagesButton = QtWidgets.QPushButton(self.verticalLayoutWidget_28)
        self.HMCaptureImagesButton.setObjectName("HMCaptureImagesButton")
        self.verticalLayout_28.addWidget(self.HMCaptureImagesButton)
        self.HMComputeButton = QtWidgets.QPushButton(self.verticalLayoutWidget_28)
        self.HMComputeButton.setObjectName("HMComputeButton")
        self.verticalLayout_28.addWidget(self.HMComputeButton)
        self.MosaicButton = QtWidgets.QPushButton(self.verticalLayoutWidget_28)
        self.MosaicButton.setObjectName("MosaicButton")
        self.verticalLayout_28.addWidget(self.MosaicButton)
        self.HMatrix = QtWidgets.QGroupBox(self.tab_8)
        self.HMatrix.setGeometry(QtCore.QRect(210, 170, 261, 141))
        self.HMatrix.setObjectName("HMatrix")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.HMatrix)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(10, 30, 241, 101))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.H4Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.H4Edit.setObjectName("H4Edit")
        self.gridLayout_2.addWidget(self.H4Edit, 2, 0, 1, 1)
        self.H2Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.H2Edit.setObjectName("H2Edit")
        self.gridLayout_2.addWidget(self.H2Edit, 0, 1, 1, 1)
        self.H3Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.H3Edit.setObjectName("H3Edit")
        self.gridLayout_2.addWidget(self.H3Edit, 0, 2, 1, 1)
        self.H1Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.H1Edit.setText("")
        self.H1Edit.setObjectName("H1Edit")
        self.gridLayout_2.addWidget(self.H1Edit, 0, 0, 1, 1)
        self.H7Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.H7Edit.setObjectName("H7Edit")
        self.gridLayout_2.addWidget(self.H7Edit, 3, 0, 1, 1)
        self.H9Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.H9Edit.setObjectName("H9Edit")
        self.gridLayout_2.addWidget(self.H9Edit, 3, 2, 1, 1)
        self.H6Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.H6Edit.setObjectName("H6Edit")
        self.gridLayout_2.addWidget(self.H6Edit, 2, 2, 1, 1)
        self.H5Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.H5Edit.setObjectName("H5Edit")
        self.gridLayout_2.addWidget(self.H5Edit, 2, 1, 1, 1)
        self.H8Edit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.H8Edit.setObjectName("H8Edit")
        self.gridLayout_2.addWidget(self.H8Edit, 3, 1, 1, 1)
        self.TabWidget_3.addTab(self.tab_8, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.Detection = QtWidgets.QGroupBox(self.tab)
        self.Detection.setGeometry(QtCore.QRect(20, 40, 181, 241))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Detection.setPalette(palette)
        self.Detection.setObjectName("Detection")
        self.verticalLayoutWidget_30 = QtWidgets.QWidget(self.Detection)
        self.verticalLayoutWidget_30.setGeometry(QtCore.QRect(10, 20, 165, 221))
        self.verticalLayoutWidget_30.setObjectName("verticalLayoutWidget_30")
        self.verticalLayout_30 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_30)
        self.verticalLayout_30.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.FaceClassifierButton = QtWidgets.QPushButton(self.verticalLayoutWidget_30)
        self.FaceClassifierButton.setObjectName("FaceClassifierButton")
        self.verticalLayout_30.addWidget(self.FaceClassifierButton)
        self.EyeClassifierButton = QtWidgets.QPushButton(self.verticalLayoutWidget_30)
        self.EyeClassifierButton.setObjectName("EyeClassifierButton")
        self.verticalLayout_30.addWidget(self.EyeClassifierButton)
        self.LoadFaceImageButton = QtWidgets.QPushButton(self.verticalLayoutWidget_30)
        self.LoadFaceImageButton.setObjectName("LoadFaceImageButton")
        self.verticalLayout_30.addWidget(self.LoadFaceImageButton)
        self.CaptureFaceImageButton = QtWidgets.QPushButton(self.verticalLayoutWidget_30)
        self.CaptureFaceImageButton.setObjectName("CaptureFaceImageButton")
        self.verticalLayout_30.addWidget(self.CaptureFaceImageButton)
        self.DetectFaceButton = QtWidgets.QPushButton(self.verticalLayoutWidget_30)
        self.DetectFaceButton.setObjectName("DetectFaceButton")
        self.verticalLayout_30.addWidget(self.DetectFaceButton)
        self.Recognition = QtWidgets.QGroupBox(self.tab)
        self.Recognition.setGeometry(QtCore.QRect(240, 10, 211, 321))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(176, 120, 185))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(146, 100, 154))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(78, 53, 82))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 1, 1))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(58, 40, 61))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 80, 123))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.Recognition.setPalette(palette)
        self.Recognition.setObjectName("Recognition")
        self.verticalLayoutWidget_33 = QtWidgets.QWidget(self.Recognition)
        self.verticalLayoutWidget_33.setGeometry(QtCore.QRect(10, 30, 191, 281))
        self.verticalLayoutWidget_33.setObjectName("verticalLayoutWidget_33")
        self.verticalLayout_33 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_33)
        self.verticalLayout_33.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_33.setObjectName("verticalLayout_33")
        self.LoadTrainDataButton = QtWidgets.QPushButton(self.verticalLayoutWidget_33)
        self.LoadTrainDataButton.setObjectName("LoadTrainDataButton")
        self.verticalLayout_33.addWidget(self.LoadTrainDataButton)
        self.LoadTrainLabelsButton = QtWidgets.QPushButton(self.verticalLayoutWidget_33)
        self.LoadTrainLabelsButton.setObjectName("LoadTrainLabelsButton")
        self.verticalLayout_33.addWidget(self.LoadTrainLabelsButton)
        self.LBPHRecognizerButton = QtWidgets.QRadioButton(self.verticalLayoutWidget_33)
        self.LBPHRecognizerButton.setChecked(True)
        self.LBPHRecognizerButton.setObjectName("LBPHRecognizerButton")
        self.verticalLayout_33.addWidget(self.LBPHRecognizerButton)
        self.EigenRecognizerButton = QtWidgets.QRadioButton(self.verticalLayoutWidget_33)
        self.EigenRecognizerButton.setObjectName("EigenRecognizerButton")
        self.verticalLayout_33.addWidget(self.EigenRecognizerButton)
        self.FisherRecognizerButton = QtWidgets.QRadioButton(self.verticalLayoutWidget_33)
        self.FisherRecognizerButton.setObjectName("FisherRecognizerButton")
        self.verticalLayout_33.addWidget(self.FisherRecognizerButton)
        self.TrainRecognizerButton = QtWidgets.QPushButton(self.verticalLayoutWidget_33)
        self.TrainRecognizerButton.setObjectName("TrainRecognizerButton")
        self.verticalLayout_33.addWidget(self.TrainRecognizerButton)
        self.LoadFaceRecogImageButton = QtWidgets.QPushButton(self.verticalLayoutWidget_33)
        self.LoadFaceRecogImageButton.setObjectName("LoadFaceRecogImageButton")
        self.verticalLayout_33.addWidget(self.LoadFaceRecogImageButton)
        self.RecognizeFaceButton = QtWidgets.QPushButton(self.verticalLayoutWidget_33)
        self.RecognizeFaceButton.setObjectName("RecognizeFaceButton")
        self.verticalLayout_33.addWidget(self.RecognizeFaceButton)
        self.TabWidget_3.addTab(self.tab, "")
        self.toolBox.addItem(self.CVTools, "")

        self.retranslateUi(IPCVToolBox)
        self.toolBox.setCurrentIndex(0)
        self.TabWidget.setCurrentIndex(0)
        self.TabWidget_2.setCurrentIndex(0)
        self.TabWidget_3.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(IPCVToolBox)

    def retranslateUi(self, IPCVToolBox):
        _translate = QtCore.QCoreApplication.translate
        IPCVToolBox.setWindowTitle(_translate("IPCVToolBox", "Dialog"))
        self.label.setText(_translate("IPCVToolBox", "<html><head/><body><p><span style=\" font-size:16pt; font-weight:600; font-style:italic; color:#75507b;\">Image Processing &amp; Computer Vision Tool Box</span></p></body></html>"))
        self.ColorSpaces.setTitle(_translate("IPCVToolBox", "Color Spaces"))
        self.GrayButton.setText(_translate("IPCVToolBox", "RGB 2 Gray"))
        self.HSVButton.setText(_translate("IPCVToolBox", "RGB 2 HSV"))
        self.YCbCrButton.setText(_translate("IPCVToolBox", "RGB 2 YCbCr"))
        self.YUVButton.setText(_translate("IPCVToolBox", "RGB 2 YUV"))
        self.Logo.setTitle(_translate("IPCVToolBox", "Logo"))
        self.SelectLogoButton.setText(_translate("IPCVToolBox", "Select Logo"))
        self.AddLogoButton.setText(_translate("IPCVToolBox", "Add Logo"))
        self.AddNoise.setTitle(_translate("IPCVToolBox", "Add Noise"))
        self.SaltnPepperButton.setText(_translate("IPCVToolBox", "Salt n Pepper"))
        self.label_2.setText(_translate("IPCVToolBox", "Density (0 - 1)"))
        self.NoiseDensityEdit.setText(_translate("IPCVToolBox", "0.5"))
        self.TabWidget.setTabText(self.TabWidget.indexOf(self.tab_1), _translate("IPCVToolBox", "Basics"))
        self.Blur.setTitle(_translate("IPCVToolBox", "Blur (Smoothing)"))
        self.AveragingButton.setText(_translate("IPCVToolBox", "Averaging"))
        self.MedianButton.setText(_translate("IPCVToolBox", "Median"))
        self.GaussianBlurButton.setText(_translate("IPCVToolBox", "Gaussian Blur"))
        self.label_3.setText(_translate("IPCVToolBox", "   Kernel Size   "))
        self.BlurKernelEdit.setText(_translate("IPCVToolBox", "5"))
        self.label_9.setText(_translate("IPCVToolBox", "  Sigma (Bilat)"))
        self.BilatSigmaEdit.setText(_translate("IPCVToolBox", "75"))
        self.BilateralButton.setText(_translate("IPCVToolBox", "Bilateral"))
        self.Morphology.setTitle(_translate("IPCVToolBox", "Morphological Operations"))
        self.DilationButton.setText(_translate("IPCVToolBox", "Dilation"))
        self.ErosionButton.setText(_translate("IPCVToolBox", "Erosion"))
        self.OpeningButton.setText(_translate("IPCVToolBox", "Opening"))
        self.ClosingButton.setText(_translate("IPCVToolBox", "Closing"))
        self.label_4.setText(_translate("IPCVToolBox", "   Kernel Size   "))
        self.MorphoKernelEdit.setText(_translate("IPCVToolBox", "5"))
        self.TabWidget.setTabText(self.TabWidget.indexOf(self.tab_2), _translate("IPCVToolBox", "Kernel Based"))
        self.Gradient.setTitle(_translate("IPCVToolBox", "Image Gradient"))
        self.SobelButton.setText(_translate("IPCVToolBox", "Sobel"))
        self.LaplacianButton.setText(_translate("IPCVToolBox", "Laplacian"))
        self.Histogram.setTitle(_translate("IPCVToolBox", "Histogram"))
        self.ComputeHistogramButton.setText(_translate("IPCVToolBox", "Compute"))
        self.EqualizeHistogramButton.setText(_translate("IPCVToolBox", "Equalize"))
        self.HoughTransform.setTitle(_translate("IPCVToolBox", "Hough Transform"))
        self.HoughCirclesButton.setText(_translate("IPCVToolBox", "Hough Circles"))
        self.label_7.setText(_translate("IPCVToolBox", "  Min Length"))
        self.HoughLineEdit.setText(_translate("IPCVToolBox", "20"))
        self.HoughLinesButton.setText(_translate("IPCVToolBox", "Hough Lines"))
        self.label_10.setText(_translate("IPCVToolBox", "  Min Radius"))
        self.HoughCircleMinEdit.setText(_translate("IPCVToolBox", "5"))
        self.label_11.setText(_translate("IPCVToolBox", " Max Radius"))
        self.HoughCircleMaxEdit.setText(_translate("IPCVToolBox", "50"))
        self.Edge.setTitle(_translate("IPCVToolBox", "Edge Detection"))
        self.CannyButton.setText(_translate("IPCVToolBox", "Canny"))
        self.label_5.setText(_translate("IPCVToolBox", "  Min Value  "))
        self.CannyMinEdit.setText(_translate("IPCVToolBox", "100"))
        self.label_6.setText(_translate("IPCVToolBox", "  Max Value "))
        self.CannyMaxEdit.setText(_translate("IPCVToolBox", "300"))
        self.CornerDetection.setTitle(_translate("IPCVToolBox", "Corner Detection"))
        self.HarrisCornerButton.setText(_translate("IPCVToolBox", "Harris Corner"))
        self.TabWidget.setTabText(self.TabWidget.indexOf(self.tab_3), _translate("IPCVToolBox", "Pixel Based"))
        self.ShapeDescriptors.setTitle(_translate("IPCVToolBox", "Shape Descriptors"))
        self.ShowContoursButton.setText(_translate("IPCVToolBox", "Show Contours"))
        self.BoundingBoxButton.setText(_translate("IPCVToolBox", "Bounding Box"))
        self.EnclosingCircleButton.setText(_translate("IPCVToolBox", "Enclosing Circle"))
        self.FeatureExtraction.setTitle(_translate("IPCVToolBox", "Feature Extraction"))
        self.FASTButton.setText(_translate("IPCVToolBox", "FAST"))
        self.SURFButton.setText(_translate("IPCVToolBox", "SURF"))
        self.SIFTButton.setText(_translate("IPCVToolBox", "SIFT"))
        self.FeatureMatching.setTitle(_translate("IPCVToolBox", "Feature Matching"))
        self.LoadMatchImage1Button.setText(_translate("IPCVToolBox", "Load Image-1"))
        self.LoadMatchImage2Button.setText(_translate("IPCVToolBox", "Load Image-2"))
        self.label_8.setText(_translate("IPCVToolBox", "  No.of Matches"))
        self.BruteForceEdit.setText(_translate("IPCVToolBox", "20"))
        self.BruteFroceMatchButton.setText(_translate("IPCVToolBox", "Brute-Force Match"))
        self.BruteFroceSIFTButton.setText(_translate("IPCVToolBox", "Brute-Force SIFT Match"))
        self.TabWidget.setTabText(self.TabWidget.indexOf(self.tab_4), _translate("IPCVToolBox", "Feature Based"))
        self.LoadImageButton.setText(_translate("IPCVToolBox", "Load Image"))
        self.CaptureImageButton.setText(_translate("IPCVToolBox", "Capture Image"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.IPTools), _translate("IPCVToolBox", "Image Processing Tools"))
        self.ColorSpaces_Video.setTitle(_translate("IPCVToolBox", "Color Spaces"))
        self.GrayButton_Video.setText(_translate("IPCVToolBox", "RGB 2 Gray"))
        self.HSVButton_Video.setText(_translate("IPCVToolBox", "RGB 2 HSV"))
        self.YCbCrButton_Video.setText(_translate("IPCVToolBox", "RGB 2 YCbCr"))
        self.YUVButton_Video.setText(_translate("IPCVToolBox", "RGB 2 YUV"))
        self.AddNoise_Video.setTitle(_translate("IPCVToolBox", "Add Noise"))
        self.SaltnPepperButton_Video.setText(_translate("IPCVToolBox", "Salt n Pepper"))
        self.label_12.setText(_translate("IPCVToolBox", "Density (0 - 1)"))
        self.NoiseDensityEdit_Video.setText(_translate("IPCVToolBox", "0.5"))
        self.Edge_Video.setTitle(_translate("IPCVToolBox", "Edge Detection"))
        self.CannyButton_Video.setText(_translate("IPCVToolBox", "Canny"))
        self.label_19.setText(_translate("IPCVToolBox", "  Min Value  "))
        self.CannyMinEdit_Video.setText(_translate("IPCVToolBox", "100"))
        self.label_20.setText(_translate("IPCVToolBox", "  Max Value "))
        self.CannyMaxEdit_Video.setText(_translate("IPCVToolBox", "300"))
        self.Histogram_Video.setTitle(_translate("IPCVToolBox", "Histogram"))
        self.EqualizeHistogramButton_Video.setText(_translate("IPCVToolBox", "Equalize"))
        self.TabWidget_2.setTabText(self.TabWidget_2.indexOf(self.tab_5), _translate("IPCVToolBox", "Basics"))
        self.Blur_Video.setTitle(_translate("IPCVToolBox", "Blur (Smoothing)"))
        self.AveragingButton_Video.setText(_translate("IPCVToolBox", "Averaging"))
        self.MedianButton_Video.setText(_translate("IPCVToolBox", "Median"))
        self.GaussianBlurButton_Video.setText(_translate("IPCVToolBox", "Gaussian Blur"))
        self.label_13.setText(_translate("IPCVToolBox", "   Kernel Size   "))
        self.BlurKernelEdit_Video.setText(_translate("IPCVToolBox", "5"))
        self.label_14.setText(_translate("IPCVToolBox", "  Sigma (Bilat)"))
        self.BilatSigmaEdit_Video.setText(_translate("IPCVToolBox", "75"))
        self.BilateralButton_Video.setText(_translate("IPCVToolBox", "Bilateral"))
        self.Morphology_Video.setTitle(_translate("IPCVToolBox", "Morphological Operations"))
        self.DilationButton_Video.setText(_translate("IPCVToolBox", "Dilation"))
        self.ErosionButton_Video.setText(_translate("IPCVToolBox", "Erosion"))
        self.OpeningButton_Video.setText(_translate("IPCVToolBox", "Opening"))
        self.ClosingButton_Video.setText(_translate("IPCVToolBox", "Closing"))
        self.label_15.setText(_translate("IPCVToolBox", "   Kernel Size   "))
        self.MorphoKernelEdit_Video.setText(_translate("IPCVToolBox", "5"))
        self.TabWidget_2.setTabText(self.TabWidget_2.indexOf(self.tab_6), _translate("IPCVToolBox", "Kernel Based"))
        self.label_16.setText(_translate("IPCVToolBox", "<html><head/><body><p><span style=\" font-weight:600; font-style:italic; color:#cc0000;\">Video Capture Starts directly when any Button is Pressed</span></p></body></html>"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.VPTools), _translate("IPCVToolBox", "Video Processing Tools"))
        self.Calibration.setTitle(_translate("IPCVToolBox", "Calibration"))
        self.CalibrateButton.setText(_translate("IPCVToolBox", "Calibrate"))
        self.label_25.setText(_translate("IPCVToolBox", "   Points/Row"))
        self.CalibRowsEdit.setText(_translate("IPCVToolBox", "7"))
        self.label_26.setText(_translate("IPCVToolBox", "    Points/Col "))
        self.CalibColumnEdit.setText(_translate("IPCVToolBox", "6"))
        self.CalibLoadImagesButton.setText(_translate("IPCVToolBox", "Load Image Folder"))
        self.CalibCaptureImagesButton.setText(_translate("IPCVToolBox", "Capture Images"))
        self.label_27.setText(_translate("IPCVToolBox", "No. of Inner Corners"))
        self.Undistort.setTitle(_translate("IPCVToolBox", "Undistort Image"))
        self.UndistortLoadImageButton.setText(_translate("IPCVToolBox", "Select Image"))
        self.UndistortButton.setText(_translate("IPCVToolBox", "Undistort"))
        self.CameraMatrix.setTitle(_translate("IPCVToolBox", "Camera Matrix"))
        self.TabWidget_3.setTabText(self.TabWidget_3.indexOf(self.tab_7), _translate("IPCVToolBox", "Calibration"))
        self.FundamentalMatrix.setTitle(_translate("IPCVToolBox", "Fundamental Matrix"))
        self.FMLoadImage1Button.setText(_translate("IPCVToolBox", "Load Image 1"))
        self.FMLoadImage2Button.setText(_translate("IPCVToolBox", "Load Image 2"))
        self.FMCaptureImagesButton.setText(_translate("IPCVToolBox", "Capture Images"))
        self.FM7PointButton.setText(_translate("IPCVToolBox", "7 Point Algorithm"))
        self.FM8PointButton.setText(_translate("IPCVToolBox", "8 Point Algorithm"))
        self.FMRANSACButton.setText(_translate("IPCVToolBox", "RANSAC Algorithm"))
        self.FMComputeButton.setText(_translate("IPCVToolBox", "Compute FM"))
        self.FMatrix.setTitle(_translate("IPCVToolBox", "Fundamental Matrix"))
        self.Epipolar.setTitle(_translate("IPCVToolBox", "Epipolar Geometry"))
        self.DrawEpipolarButton.setText(_translate("IPCVToolBox", "Draw Epipolar Lines"))
        self.TabWidget_3.setTabText(self.TabWidget_3.indexOf(self.tab_9), _translate("IPCVToolBox", "Epipolar"))
        self.Stitching.setTitle(_translate("IPCVToolBox", "Stitching"))
        self.StitchLoadImagesButton.setText(_translate("IPCVToolBox", "Load Image Folder"))
        self.StitchCaptureImagesButton.setText(_translate("IPCVToolBox", "Capture Images"))
        self.StitchImagesButton.setText(_translate("IPCVToolBox", "Stitch Images"))
        self.Homography.setTitle(_translate("IPCVToolBox", "Homography"))
        self.HMLoadImage1Button.setText(_translate("IPCVToolBox", "Load Image 1"))
        self.HMLoadImage2Button.setText(_translate("IPCVToolBox", "Load Image 2"))
        self.HMCaptureImagesButton.setText(_translate("IPCVToolBox", "Capture Images"))
        self.HMComputeButton.setText(_translate("IPCVToolBox", "Compute Homography"))
        self.MosaicButton.setText(_translate("IPCVToolBox", "Mosaic Images"))
        self.HMatrix.setTitle(_translate("IPCVToolBox", "Homography Matrix"))
        self.TabWidget_3.setTabText(self.TabWidget_3.indexOf(self.tab_8), _translate("IPCVToolBox", "Homography"))
        self.Detection.setTitle(_translate("IPCVToolBox", "Face Detection"))
        self.FaceClassifierButton.setText(_translate("IPCVToolBox", "Load Face Classifier"))
        self.EyeClassifierButton.setText(_translate("IPCVToolBox", "Load Eye Classifier"))
        self.LoadFaceImageButton.setText(_translate("IPCVToolBox", "Select Image"))
        self.CaptureFaceImageButton.setText(_translate("IPCVToolBox", "Capture Image"))
        self.DetectFaceButton.setText(_translate("IPCVToolBox", "Detect Face"))
        self.Recognition.setTitle(_translate("IPCVToolBox", "Face Recognition"))
        self.LoadTrainDataButton.setText(_translate("IPCVToolBox", "Load Train Data"))
        self.LoadTrainLabelsButton.setText(_translate("IPCVToolBox", "Load Train Labels"))
        self.LBPHRecognizerButton.setText(_translate("IPCVToolBox", "LBPH Face Recognizer"))
        self.EigenRecognizerButton.setText(_translate("IPCVToolBox", "Eigen Face Rocgnizer"))
        self.FisherRecognizerButton.setText(_translate("IPCVToolBox", "Fisher Face Recognizer"))
        self.TrainRecognizerButton.setText(_translate("IPCVToolBox", "Train Recognizer"))
        self.LoadFaceRecogImageButton.setText(_translate("IPCVToolBox", "Select Test Image"))
        self.RecognizeFaceButton.setText(_translate("IPCVToolBox", "Recognize"))
        self.TabWidget_3.setTabText(self.TabWidget_3.indexOf(self.tab), _translate("IPCVToolBox", "Face Recognition"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.CVTools), _translate("IPCVToolBox", "Computer Vision Tools"))
# End of GUI Initialization

        # Connect All Push Buttons to the corresponding functions
        self.LoadImageButton.clicked.connect(self.on_LoadImageButton_clicked)
        self.CaptureImageButton.clicked.connect(self.on_CaptureImageButton_clicked)
        self.GrayButton.clicked.connect(self.on_GrayButton_clicked)
        self.GrayButton.setEnabled(False)
        self.HSVButton.clicked.connect(self.on_HSVButton_clicked)
        self.HSVButton.setEnabled(False)
        self.YCbCrButton.clicked.connect(self.on_YCbCrButton_clicked)
        self.YCbCrButton.setEnabled(False)
        self.YUVButton.clicked.connect(self.on_YUVButton_clicked)
        self.YUVButton.setEnabled(False)
        self.SelectLogoButton.clicked.connect(self.on_SelectLogoButton_clicked)
        self.SelectLogoButton.setEnabled(False)
        self.AddLogoButton.clicked.connect(self.on_AddLogoButton_clicked)
        self.AddLogoButton.setEnabled(False)
        self.SaltnPepperButton.clicked.connect(self.on_SaltnPepperButton_clicked)
        self.SaltnPepperButton.setEnabled(False)
        self.DilationButton.clicked.connect(self.on_DilationButton_clicked)
        self.DilationButton.setEnabled(False)
        self.ErosionButton.clicked.connect(self.on_ErosionButton_clicked)
        self.ErosionButton.setEnabled(False)
        self.OpeningButton.clicked.connect(self.on_OpeningButton_clicked)
        self.OpeningButton.setEnabled(False)
        self.ClosingButton.clicked.connect(self.on_ClosingButton_clicked)
        self.ClosingButton.setEnabled(False)
        self.AveragingButton.clicked.connect(self.on_AveragingButton_clicked)
        self.AveragingButton.setEnabled(False)
        self.MedianButton.clicked.connect(self.on_MedianButton_clicked)
        self.MedianButton.setEnabled(False)
        self.GaussianBlurButton.clicked.connect(self.on_GaussianBlurButton_clicked)
        self.GaussianBlurButton.setEnabled(False)
        self.BilateralButton.clicked.connect(self.on_BilateralButton_clicked)
        self.BilateralButton.setEnabled(False)
        self.ComputeHistogramButton.clicked.connect(self.on_ComputeHistogramButton_clicked)
        self.ComputeHistogramButton.setEnabled(False)
        self.EqualizeHistogramButton.clicked.connect(self.on_EqualizeHistogramButton_clicked)
        self.EqualizeHistogramButton.setEnabled(False)
        self.HoughLinesButton.clicked.connect(self.on_HoughLinesButton_clicked)
        self.HoughLinesButton.setEnabled(False)
        self.HoughCirclesButton.clicked.connect(self.on_HoughCirclesButton_clicked)
        self.HoughCirclesButton.setEnabled(False)
        self.SobelButton.clicked.connect(self.on_SobelButton_clicked)
        self.SobelButton.setEnabled(False)
        self.LaplacianButton.clicked.connect(self.on_LaplacianButton_clicked)
        self.LaplacianButton.setEnabled(False)
        self.CannyButton.clicked.connect(self.on_CannyButton_clicked)
        self.CannyButton.setEnabled(False)
        self.HarrisCornerButton.clicked.connect(self.on_HarrisCornerButton_clicked)
        self.HarrisCornerButton.setEnabled(False)
        self.ShowContoursButton.clicked.connect(self.on_ShowContoursButton_clicked)
        self.ShowContoursButton.setEnabled(False)
        self.BoundingBoxButton.clicked.connect(self.on_BoundingBoxButton_clicked)
        self.BoundingBoxButton.setEnabled(False)
        self.EnclosingCircleButton.clicked.connect(self.on_EnclosingCircleButton_clicked)
        self.EnclosingCircleButton.setEnabled(False)
        self.FASTButton.clicked.connect(self.on_FASTButton_clicked)
        self.FASTButton.setEnabled(False)
        self.SURFButton.clicked.connect(self.on_SURFButton_clicked)
        self.SURFButton.setEnabled(False)
        self.SIFTButton.clicked.connect(self.on_SIFTButton_clicked)
        self.SIFTButton.setEnabled(False)
        self.LoadMatchImage1Button.clicked.connect(self.on_LoadMatchImage1Button_clicked)
        self.LoadMatchImage2Button.clicked.connect(self.on_LoadMatchImage2Button_clicked)
        self.LoadMatchImage2Button.setEnabled(False)
        self.BruteFroceMatchButton.clicked.connect(self.on_BruteFroceMatchButton_clicked)
        self.BruteFroceMatchButton.setEnabled(False)
        self.BruteFroceSIFTButton.clicked.connect(self.on_BruteFroceSIFTButton_clicked)
        self.BruteFroceSIFTButton.setEnabled(False)
        self.GrayButton_Video.clicked.connect(self.on_GrayButton_Video_clicked)
        self.HSVButton_Video.clicked.connect(self.on_HSVButton_Video_clicked)
        self.YCbCrButton_Video.clicked.connect(self.on_YCbCrButton_Video_clicked)
        self.YUVButton_Video.clicked.connect(self.on_YUVButton_Video_clicked)
        self.EqualizeHistogramButton_Video.clicked.connect(self.on_EqualizeHistogramButton_Video_clicked)
        self.CannyButton_Video.clicked.connect(self.on_CannyButton_Video_clicked)
        self.SaltnPepperButton_Video.clicked.connect(self.on_SaltnPepperButton_Video_clicked)
        self.DilationButton_Video.clicked.connect(self.on_DilationButton_Video_clicked)
        self.ErosionButton_Video.clicked.connect(self.on_ErosionButton_Video_clicked)
        self.OpeningButton_Video.clicked.connect(self.on_OpeningButton_Video_clicked)
        self.ClosingButton_Video.clicked.connect(self.on_ClosingButton_Video_clicked)
        self.AveragingButton_Video.clicked.connect(self.on_AveragingButton_Video_clicked)
        self.MedianButton_Video.clicked.connect(self.on_MedianButton_Video_clicked)
        self.GaussianBlurButton_Video.clicked.connect(self.on_GaussianBlurButton_Video_clicked)
        self.BilateralButton_Video.clicked.connect(self.on_BilateralButton_Video_clicked)
        self.CalibLoadImagesButton.clicked.connect(self.on_CalibLoadImagesButton_clicked)
        self.CalibCaptureImagesButton.clicked.connect(self.on_CalibCaptureImagesButton_clicked)
        self.CalibrateButton.clicked.connect(self.on_CalibrateButton_clicked)
        self.CalibrateButton.setEnabled(False)
        self.UndistortLoadImageButton.clicked.connect(self.on_UndistortLoadImageButton_clicked)
        self.UndistortLoadImageButton.setEnabled(False)
        self.UndistortButton.clicked.connect(self.on_UndistortButton_clicked)
        self.UndistortButton.setEnabled(False)
        self.FMLoadImage1Button.clicked.connect(self.on_FMLoadImage1Button_clicked)
        self.FMLoadImage2Button.clicked.connect(self.on_FMLoadImage2Button_clicked)
        self.FMLoadImage2Button.setEnabled(False)
        self.FMCaptureImagesButton.clicked.connect(self.on_FMCaptureImagesButton_clicked)
        self.FMComputeButton.clicked.connect(self.on_FMComputeButton_clicked)
        self.FMComputeButton.setEnabled(False)
        self.DrawEpipolarButton.clicked.connect(self.on_DrawEpipolarButton_clicked)
        self.DrawEpipolarButton.setEnabled(False)
        self.HMLoadImage1Button.clicked.connect(self.on_HMLoadImage1Button_clicked)
        self.HMLoadImage2Button.clicked.connect(self.on_HMLoadImage2Button_clicked)
        self.HMLoadImage2Button.setEnabled(False)
        self.HMCaptureImagesButton.clicked.connect(self.on_HMCaptureImagesButton_clicked)
        self.HMComputeButton.clicked.connect(self.on_HMComputeButton_clicked)
        self.HMComputeButton.setEnabled(False)
        self.MosaicButton.clicked.connect(self.on_MosaicButton_clicked)
        self.MosaicButton.setEnabled(False)
        self.StitchLoadImagesButton.clicked.connect(self.on_StitchLoadImagesButton_clicked)
        self.StitchCaptureImagesButton.clicked.connect(self.on_StitchCaptureImagesButton_clicked)
        self.StitchImagesButton.clicked.connect(self.on_StitchImagesButton_clicked)
        self.StitchImagesButton.setEnabled(False)
        self.FaceClassifierButton.clicked.connect(self.on_FaceClassifierButton_clicked)
        self.EyeClassifierButton.clicked.connect(self.on_EyeClassifierButton_clicked)
        self.EyeClassifierButton.setEnabled(False)
        self.LoadFaceImageButton.clicked.connect(self.on_LoadFaceImageButton_clicked)
        self.LoadFaceImageButton.setEnabled(False)
        self.CaptureFaceImageButton.clicked.connect(self.on_CaptureFaceImageButton_clicked)
        self.CaptureFaceImageButton.setEnabled(False)
        self.DetectFaceButton.clicked.connect(self.on_DetectFaceButton_clicked)
        self.DetectFaceButton.setEnabled(False)
        self.LoadTrainDataButton.clicked.connect(self.on_LoadTrainDataButton_clicked)
        self.LoadTrainDataButton.setEnabled(False)
        self.LoadTrainLabelsButton.clicked.connect(self.on_LoadTrainLabelsButton_clicked)
        self.LoadTrainLabelsButton.setEnabled(False)
        self.TrainRecognizerButton.clicked.connect(self.on_TrainRecognizerButton_clicked)
        self.TrainRecognizerButton.setEnabled(False)
        self.LoadFaceRecogImageButton.clicked.connect(self.on_LoadFaceRecogImageButton_clicked)
        self.LoadFaceRecogImageButton.setEnabled(False)
        self.RecognizeFaceButton.clicked.connect(self.on_RecognizeFaceButton_clicked)
        self.RecognizeFaceButton.setEnabled(False)

# Define the Functionalities for Push Button Actions
    def on_LoadImageButton_clicked(self):
        # Load an Image with File Picker (Found on https://doc.qt.io/qt-5/qfiledialog.html)
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select an Image","","Image Files (*.jpg *.jpeg *.JPG *.tif *.tiff *.png *.bmp)", options=options)
        # Read the Image
        img = cv.imread(fileName)
        global input
        input = img
        if input is not None:
            # Show the Message (Found on https://doc.qt.io/qtforpython/PySide2/QtWidgets/QMessageBox.html)
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Image Loaded Successfully")
            msgBox.exec_()
            self.GrayButton.setEnabled(True)
            self.HSVButton.setEnabled(True)
            self.YCbCrButton.setEnabled(True)
            self.YUVButton.setEnabled(True)
            self.SelectLogoButton.setEnabled(True)
            self.SaltnPepperButton.setEnabled(True)
            self.DilationButton.setEnabled(True)
            self.ErosionButton.setEnabled(True)
            self.OpeningButton.setEnabled(True)
            self.ClosingButton.setEnabled(True)
            self.AveragingButton.setEnabled(True)
            self.MedianButton.setEnabled(True)
            self.GaussianBlurButton.setEnabled(True)
            self.BilateralButton.setEnabled(True)
            self.ComputeHistogramButton.setEnabled(True)
            self.EqualizeHistogramButton.setEnabled(True)
            self.HoughLinesButton.setEnabled(True)
            self.HoughCirclesButton.setEnabled(True)
            self.SobelButton.setEnabled(True)
            self.LaplacianButton.setEnabled(True)
            self.CannyButton.setEnabled(True)
            self.HarrisCornerButton.setEnabled(True)
            self.ShowContoursButton.setEnabled(True)
            self.BoundingBoxButton.setEnabled(True)
            self.EnclosingCircleButton.setEnabled(True)
            self.FASTButton.setEnabled(True)
            self.SURFButton.setEnabled(True)
            self.SIFTButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Image Loaded!!!")
            msgBox.exec_()

    def on_CaptureImageButton_clicked(self):
        # Access the Camera (Found on https://docs.opencv.org/3.4.2/dd/d43/tutorial_py_video_display.html)
        # Initialize Capture
        cap = cv.VideoCapture(0) # 0 is internal cam ; 1 is external webcam
        # Show the Message
        msgBox = QMessageBox()
        msgBox.setText("Attention!")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
        msgBox.setInformativeText("Press 'c' to Capture Image, 'q' to Quit")
        msgBox.exec_()
        while(True):
            ret, frame = cap.read()
            cv.imshow("Camera",frame)
            key=cv.waitKey(30)
            if key==ord('q'):
                break
            # Capture the Image
            if key==ord('c'):
                cv.imshow("Captured Image",frame)
                global input
                input = frame
                # Show the Message
                msgBox1 = QMessageBox()
                msgBox1.setText("Image Captured & Loaded successfully")
                msgBox1.setInformativeText("Do you want to save Captured Image?")
                msgBox1.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
                msgBox1.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
                msgBox1.setDefaultButton(QMessageBox.Save)
                ret1 = msgBox1.exec_()
                if ret1 == QMessageBox.Save:
                    # Save was Clicked
                    fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
                    cv.imwrite(fileName, frame)
                    self.GrayButton.setEnabled(True)
                    self.HSVButton.setEnabled(True)
                    self.YCbCrButton.setEnabled(True)
                    self.YUVButton.setEnabled(True)
                    self.SelectLogoButton.setEnabled(True)
                    self.SaltnPepperButton.setEnabled(True)
                    self.DilationButton.setEnabled(True)
                    self.ErosionButton.setEnabled(True)
                    self.OpeningButton.setEnabled(True)
                    self.ClosingButton.setEnabled(True)
                    self.AveragingButton.setEnabled(True)
                    self.MedianButton.setEnabled(True)
                    self.GaussianBlurButton.setEnabled(True)
                    self.BilateralButton.setEnabled(True)
                    self.ComputeHistogramButton.setEnabled(True)
                    self.EqualizeHistogramButton.setEnabled(True)
                    self.HoughLinesButton.setEnabled(True)
                    self.HoughCirclesButton.setEnabled(True)
                    self.SobelButton.setEnabled(True)
                    self.LaplacianButton.setEnabled(True)
                    self.CannyButton.setEnabled(True)
                    self.HarrisCornerButton.setEnabled(True)
                    self.ShowContoursButton.setEnabled(True)
                    self.BoundingBoxButton.setEnabled(True)
                    self.EnclosingCircleButton.setEnabled(True)
                    self.FASTButton.setEnabled(True)
                    self.SURFButton.setEnabled(True)
                    self.SIFTButton.setEnabled(True)
                    break
                elif ret1 == QMessageBox.Discard:
                    # Discard was Clicked
                    self.GrayButton.setEnabled(True)
                    self.HSVButton.setEnabled(True)
                    self.YCbCrButton.setEnabled(True)
                    self.YUVButton.setEnabled(True)
                    self.SelectLogoButton.setEnabled(True)
                    self.SaltnPepperButton.setEnabled(True)
                    self.DilationButton.setEnabled(True)
                    self.ErosionButton.setEnabled(True)
                    self.OpeningButton.setEnabled(True)
                    self.ClosingButton.setEnabled(True)
                    self.AveragingButton.setEnabled(True)
                    self.MedianButton.setEnabled(True)
                    self.GaussianBlurButton.setEnabled(True)
                    self.BilateralButton.setEnabled(True)
                    self.ComputeHistogramButton.setEnabled(True)
                    self.EqualizeHistogramButton.setEnabled(True)
                    self.HoughLinesButton.setEnabled(True)
                    self.HoughCirclesButton.setEnabled(True)
                    self.SobelButton.setEnabled(True)
                    self.LaplacianButton.setEnabled(True)
                    self.CannyButton.setEnabled(True)
                    self.HarrisCornerButton.setEnabled(True)
                    self.ShowContoursButton.setEnabled(True)
                    self.BoundingBoxButton.setEnabled(True)
                    self.EnclosingCircleButton.setEnabled(True)
                    self.FASTButton.setEnabled(True)
                    self.SURFButton.setEnabled(True)
                    self.SIFTButton.setEnabled(True)
                    break
        # Release Capture
        cap.release()
        cv.destroyAllWindows()

    def on_GrayButton_clicked(self):
        # Changing Colorspaces (Found on https://docs.opencv.org/3.4.2/df/d9d/tutorial_py_colorspaces.html)
        # Convert RGB Image to Gray
        Gray = cv.cvtColor(input, cv.COLOR_BGR2GRAY)
        Gray = cv.cvtColor(Gray, cv.COLOR_GRAY2BGR) # To Convert into 3 Channels (Optional - For displaying the Image)
        show_N_save(input,Gray,"Original Image","Gray Image")

    def on_HSVButton_clicked(self):
        # Convert RGB Image to HSV
        HSV = cv.cvtColor(input, cv.COLOR_BGR2HSV)
        show_N_save(input,HSV,"Original Image","HSV Image")

    def on_YCbCrButton_clicked(self):
        # Convert RGB Image to YCbCr
        YCbCr = cv.cvtColor(input, cv.COLOR_BGR2YCrCb)
        show_N_save(input,YCbCr,"Original Image","YCbCr Image")

    def on_YUVButton_clicked(self):
        # Convert RGB Image to YUV
        YUV = cv.cvtColor(input, cv.COLOR_BGR2YUV)
        show_N_save(input,YUV,"Original Image","YUV Image")

    def on_SelectLogoButton_clicked(self):
        # Select Logo
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select a Logo","","Image Files (*.jpg *.jpeg *.JPG *.tif *.tiff *.png *.bmp)", options=options)
        img = cv.imread(fileName)
        global logo
        logo = img
        if logo is not None:
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Logo Selected Successfully")
            msgBox.exec_()
            self.AddLogoButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Logo Selected!!!")
            msgBox.exec_()

    def on_AddLogoButton_clicked(self):
        # Add Logo to Image
        output = cv.resize(input, (300,300), interpolation = cv.INTER_AREA)
        msgBox = QMessageBox()
        msgBox.setText("Attention!")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
        msgBox.setInformativeText("Drag to Select a ROI and then press ENTER button (or Press 'c' to Cancel)!")
        msgBox.exec_()
        # Select ROI (Found on https://docs.opencv.org/3.4.2/d7/dfc/group__highgui.html#ga0f11fad74a6432b8055fb21621a0f893)
        r = cv.selectROI(output)
        resized = cv.resize(logo, (r[2],r[3]), interpolation = cv.INTER_AREA)
        output[int(r[1]):int(r[1]+r[3]), int(r[0]):int(r[0]+r[2])] = resized
        show_N_save(input,output,"Original Image","Image with Logo")

    def on_SaltnPepperButton_clicked(self):
        # Add Salt & Pepper Noise (# Found on https://stackoverflow.com/questions/14435632/impulse-gaussian-and-salt-and-pepper-noise-with-opencv)
        row,col,ch = input.shape
        sNp = 0.6
        amount = float(self.NoiseDensityEdit.text())
        output = np.copy(input)
        # Salt Noise
        num_salt = np.ceil(amount * input.size * sNp)
        coords = [np.random.randint(0, i - 1, int(num_salt))
            for i in input.shape]
        output[coords] = 1
        # Pepper Noise
        num_pepper = np.ceil(amount* input.size * (1. - sNp))
        coords = [np.random.randint(0, i - 1, int(num_pepper))
              for i in input.shape]
        output[coords] = 0
        show_N_save(input,output,"Original Image","Noisy Image")

    def on_DilationButton_clicked(self):
        # Morphological Transformations (Found on https://docs.opencv.org/3.4.2/d9/d61/tutorial_py_morphological_ops.html)
        # Dilation
        # Get Kernel size from the user
        k = int(self.MorphoKernelEdit.text())
        if k % 2 == 1:
            img = cv.medianBlur(input,k)
            gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
            th3 = cv.adaptiveThreshold(gray,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,11,2)
            kernel = np.ones((k,k),np.uint8)
            dilation = cv.dilate(th3,kernel,iterations = 1)
            show_N_save(th3,dilation,"Binary Image","Dilated Image")
        else:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()

    def on_ErosionButton_clicked(self):
        # Erosion
        # Get Kernel size from the user
        k = int(self.MorphoKernelEdit.text())
        if k % 2 == 1:
            img = cv.medianBlur(input,k)
            gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
            th3 = cv.adaptiveThreshold(gray,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,11,2)
            kernel = np.ones((k,k),np.uint8)
            erosion = cv.erode(th3,kernel,iterations = 1)
            show_N_save(th3,erosion,"Binary Image","Eroded Image")
        else:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()

    def on_OpeningButton_clicked(self):
        # Opening
        # Get Kernel size from the user
        k = int(self.MorphoKernelEdit.text())
        if k % 2 == 1:
            img = cv.medianBlur(input,k)
            gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
            th3 = cv.adaptiveThreshold(gray,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,11,2)
            kernel = np.ones((k,k),np.uint8)
            opening = cv.morphologyEx(th3, cv.MORPH_OPEN, kernel)
            show_N_save(th3,opening,"Binary Image","Opened Image")
        else:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()

    def on_ClosingButton_clicked(self):
        # Closing
        # Get Kernel size from the user
        k = int(self.MorphoKernelEdit.text())
        if k % 2 == 1:
            img = cv.medianBlur(input,k)
            gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
            th3 = cv.adaptiveThreshold(gray,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,11,2)
            kernel = np.ones((k,k),np.uint8)
            closing = cv.morphologyEx(th3, cv.MORPH_CLOSE, kernel)
            show_N_save(th3,closing,"Binary Image","Closed Image")
        else:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()

    def on_AveragingButton_clicked(self):
        # Image Blurring (Image Smoothing) (Found on https://docs.opencv.org/3.4.2/d4/d13/tutorial_py_filtering.html)
        # Averaging
        # Get Kernel size from the user
        k = int(self.BlurKernelEdit.text())
        if k % 2 == 1:
            avg = cv.blur(input,(k,k))
            show_N_save(input,avg,"Original Image", "Blurred Image")
        else:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()

    def on_MedianButton_clicked(self):
        # Median Blur
        # Get Kernel size from the user
        k = int(self.BlurKernelEdit.text())
        if k % 2 == 1:
            median = cv.medianBlur(input,k)
            show_N_save(input, median,"Original Image", "Blurred Image")
        else:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()

    def on_GaussianBlurButton_clicked(self):
        # Gaussian Blur
        # Get Kernel size from the user
        k = int(self.BlurKernelEdit.text())
        if k % 2 == 1:
            gauss = cv.GaussianBlur(input,(k,k),0)
            show_N_save(input, gauss,"Original Image", "Blurred Image")
        else:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()

    def on_BilateralButton_clicked(self):
        # Bilateral
        # Get Kernel size from the user
        k = int(self.BlurKernelEdit.text())
        if k % 2 == 1:
            # Get Sigma from the user
            S = int(self.BilatSigmaEdit.text())
            blur = cv.bilateralFilter(input,k,S,S)
            show_N_save(input, blur,"Original Image", "Blurred Image")
        else:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()

    def on_ComputeHistogramButton_clicked(self):
        # Histogram (Found on https://docs.opencv.org/3.4.2/d1/db7/tutorial_py_histogram_begins.html)
        color = ('b','g','r')
        for i,col in enumerate(color):
            # Compute Histogram
            hist = cv.calcHist([input],[i],None,[256],[0,256])
            # Plot
            plt.figure("Histogram")
            plt.axes()
            plt.plot(hist,color = col)
            plt.title('Histogram of Blue-Green-Red Channels')
            plt.xlim([0,256])
        plt.show()

    def on_EqualizeHistogramButton_clicked(self):
        # Histogram Equalization (Found on https://docs.opencv.org/3.4.2/d5/daf/tutorial_py_histogram_equalization.html)
        img = cv.cvtColor(input, cv.COLOR_BGR2GRAY)
        equ = cv.equalizeHist(img)
        show_N_save(img,equ,"Original Image","Equalized Image")

    def on_HoughLinesButton_clicked(self):
        # Hough Lines (Found on https://docs.opencv.org/3.4.2/d6/d10/tutorial_py_houghlines.html)
        output = np.copy(input)
        gray = cv.cvtColor(output,cv.COLOR_BGR2GRAY)
        edges = cv.Canny(gray,50,150,apertureSize = 3)
        M = int(self.HoughLineEdit.text())
        lines = cv.HoughLinesP(edges,1,np.pi/180,100,minLineLength=M,maxLineGap=10)
        while(True):
            if lines is None:
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("No Lines found greater than Specified Min Length!")
                msgBox.exec_()
                break
            for line in lines:
                x1,y1,x2,y2 = line[0]
                cv.line(output,(x1,y1),(x2,y2),(0,255,0),2)
            break
        show_N_save(input,output,"Input Image","Hough Lines")

    def on_HoughCirclesButton_clicked(self):
        # Hough Circles (Found on https://docs.opencv.org/3.4.2/da/d53/tutorial_py_houghcircles.html)
        output = np.copy(input)
        img = cv.cvtColor(output,cv.COLOR_BGR2GRAY)
        img = cv.medianBlur(img,5)
        Min = int(self.HoughCircleMinEdit.text())
        Max = int(self.HoughCircleMaxEdit.text())
        circles = cv.HoughCircles(img,cv.HOUGH_GRADIENT,1,20,param1=50,param2=30,minRadius=Min,maxRadius=Max)
        while(True):
            if circles is None:
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("No Circles found between the Specified Radius!")
                msgBox.exec_()
                break
            circles = np.uint16(np.around(circles))
            for i in circles[0,:]:
                # draw the outer circle
                cv.circle(output,(i[0],i[1]),i[2],(0,255,0),2)
                # draw the center of the circle
                cv.circle(output,(i[0],i[1]),2,(0,0,255),3)
            break
        show_N_save(input,output,"Input Image","Hough Circles")

    def on_SobelButton_clicked(self):
        # Image Gradients (Found on https://docs.opencv.org/3.4.2/d5/d0f/tutorial_py_gradients.html)
        # Sobel
        img = cv.cvtColor(input,cv.COLOR_BGR2GRAY)
        sobelx = cv.Sobel(img,cv.CV_64F,1,0,ksize=5)
        sobely = cv.Sobel(img,cv.CV_64F,0,1,ksize=5)
        sobel = np.sqrt((sobelx)**2+(sobely)**2)
        plt.figure("Sobel Operator")
        plt.axes()
        plt.subplot(221), plt.imshow(img,cmap='gray'), plt.title('Original Image'), plt.xticks([]), plt.yticks([])
        plt.subplot(222), plt.imshow(sobel,cmap='gray'), plt.title('Sobel Gradient'), plt.xticks([]), plt.yticks([])
        plt.subplot(223), plt.imshow(sobelx,cmap='gray'), plt.title('Sobel x-Gradient'), plt.xticks([]), plt.yticks([])
        plt.subplot(224), plt.imshow(sobely,cmap='gray'), plt.title('Sobel y-Gradient'), plt.xticks([]), plt.yticks([])
        plt.show()

    def on_LaplacianButton_clicked(self):
        # Laplacian
        img = cv.cvtColor(input,cv.COLOR_BGR2GRAY)
        laplacian = np.uint8(cv.Laplacian(img,cv.CV_64F))
        plt.figure("Laplacian Operator")
        plt.axes()
        plt.subplot(121), plt.imshow(img,cmap='gray'), plt.title('Original Image'), plt.xticks([]), plt.yticks([])
        plt.subplot(122), plt.imshow(laplacian,cmap='gray'), plt.title('Laplacian Gradient'), plt.xticks([]), plt.yticks([])
        plt.show()

    def on_CannyButton_clicked(self):
        # Canny Edge Detection (Found on https://docs.opencv.org/3.4.2/da/d22/tutorial_py_canny.html)
        Min = int(self.CannyMinEdit.text())
        Max = int(self.CannyMaxEdit.text())
        img = cv.cvtColor(input,cv.COLOR_BGR2GRAY)
        edges = cv.Canny(img,Min,Max)
        show_N_save(img,edges,"Input Image","Canny Edges")

    def on_HarrisCornerButton_clicked(self):
        # Harris Corner Detector (Found on https://docs.opencv.org/3.4.2/dc/d0d/tutorial_py_features_harris.html)
        output = np.copy(input)
        img = cv.cvtColor(output,cv.COLOR_BGR2GRAY)
        gray = np.float32(img)
        dst = cv.cornerHarris(gray,2,3,0.04)
        #result is dilated for marking the corners, not important
        dst = cv.dilate(dst,None)
        # Threshold for an optimal value, it may vary depending on the image.
        output[dst>0.01*dst.max()]=[0,0,255]
        show_N_save(input,output,"Original Image","Harris Corner")

    def on_ShowContoursButton_clicked(self):
        # Draw Contours (Found on https://docs.opencv.org/3.4.2/d4/d73/tutorial_py_contours_begin.html)
        output = np.copy(input)
        imgray = cv.cvtColor(output, cv.COLOR_BGR2GRAY)
        ret, thresh = cv.threshold(imgray, 127, 255, 0)
        im2, contours, hierarchy = cv.findContours(thresh, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
        cv.drawContours(output, contours, -1, (0,255,0), 3)
        show_N_save(input,output,"Original Image","Contours")

    def on_BoundingBoxButton_clicked(self):
        # Bounding Boxes (Found on https://docs.opencv.org/3.4.2/dd/d49/tutorial_py_contour_features.html)
        output = np.copy(input)
        imgray = cv.cvtColor(output, cv.COLOR_BGR2GRAY)
        ret, thresh = cv.threshold(imgray, 127, 255, 0)
        im2, contours, hierarchy = cv.findContours(thresh, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
        cnt = contours[0]
        x,y,w,h = cv.boundingRect(cnt)
        cv.rectangle(output,(x,y),(x+w,y+h),(0,255,0),2)
        show_N_save(input,output,"Original Image","Bounding Boxes")

    def on_EnclosingCircleButton_clicked(self):
        # Minimum Enclosing Circles (Found on https://docs.opencv.org/3.4.2/dd/d49/tutorial_py_contour_features.html)
        output = np.copy(input)
        imgray = cv.cvtColor(output, cv.COLOR_BGR2GRAY)
        ret, thresh = cv.threshold(imgray, 127, 255, 0)
        im2, contours, hierarchy = cv.findContours(thresh, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
        cnt = contours[0]
        (x,y),radius = cv.minEnclosingCircle(cnt)
        center = (int(x),int(y))
        radius = int(radius)
        cv.circle(output,center,radius,(0,255,0),2)
        show_N_save(input,output,"Original Image","Min-Enclosing Circles")

    def on_FASTButton_clicked(self):
        # FAST Algorithm for Corner Detection (Found on https://docs.opencv.org/3.4.2/df/d0c/tutorial_py_fast.html)
        imgray = cv.cvtColor(input, cv.COLOR_BGR2GRAY)
        # Initiate FAST object with default values
        fast = cv.FastFeatureDetector_create()
        # Find and Draw the Keypoints
        kp = fast.detect(imgray,None)
        img2 = cv.drawKeypoints(imgray, kp, None, color=(255,0,0))
        show_N_save(input,img2,"Original Image","FAST Features")

    def on_SURFButton_clicked(self):
        # SURF - Speeded-Up Robust Features (Found on https://docs.opencv.org/3.4.2/df/dd2/tutorial_py_surf_intro.html)
        img = cv.cvtColor(input, cv.COLOR_BGR2GRAY)
        # Create SURF object.
        # Set Hessian Threshold to 5000
        surf = cv.xfeatures2d.SURF_create(5000)
        # Find keypoints and descriptors
        kp, des = surf.detectAndCompute(img,None)
        # Find and Draw the Keypoints
        img2 = cv.drawKeypoints(img,kp,None,(255,0,0),4)
        show_N_save(input,img2,"Original Image","SURF Features")

    def on_SIFTButton_clicked(self):
        # SIFT - Scale-Invariant Feature Transform (Found on https://docs.opencv.org/3.4.2/da/df5/tutorial_py_sift_intro.html)
        output = np.copy(input)
        gray= cv.cvtColor(output,cv.COLOR_BGR2GRAY)
        # Create SIFT object.
        sift = cv.xfeatures2d.SIFT_create()
        # Find keypoints and descriptors
        kp = sift.detect(gray,None)
        # Find and Draw the Keypoints
        img2=cv.drawKeypoints(gray,kp,output,flags=cv.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
        show_N_save(input,img2,"Original Image","SIFT Features")

    def on_LoadMatchImage1Button_clicked(self):
        # Load an Image with File Picker
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select Image-1","","Image Files (*.jpg *.jpeg *.JPG *.tif *.tiff *.png *.bmp)", options=options)
        # Read the Image
        img = cv.imread(fileName)
        global Match1
        Match1 = img
        if Match1 is not None:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Image-1 Loaded Successfully")
            msgBox.exec_()
            self.LoadMatchImage2Button.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Image Loaded!!!")
            msgBox.exec_()

    def on_LoadMatchImage2Button_clicked(self):
        # Load an Image with File Picker
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select Image-2","","Image Files (*.jpg *.jpeg *.JPG *.tif *.tiff *.png *.bmp)", options=options)
        # Read the Image
        img = cv.imread(fileName)
        global Match2
        Match2 = img
        if Match2 is not None:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Image-2 Loaded Successfully")
            msgBox.exec_()
            self.BruteFroceMatchButton.setEnabled(True)
            self.BruteFroceSIFTButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Image Loaded!!!")
            msgBox.exec_()

    def on_BruteFroceMatchButton_clicked(self):
        # Feature Matching (Found on https://docs.opencv.org/3.4.2/dc/dc3/tutorial_py_matcher.html)
        img1 = cv.resize(Match1,(300,300),interpolation = cv.INTER_AREA)
        img2 = cv.resize(Match2,(300,300),interpolation = cv.INTER_AREA)
        img1 = cv.cvtColor(img1,cv.COLOR_BGR2GRAY)
        img2 = cv.cvtColor(img2,cv.COLOR_BGR2GRAY)
        # Initiate ORB detector
        orb = cv.ORB_create()
        # Find the keypoints and descriptors with ORB
        kp1, des1 = orb.detectAndCompute(img1,None)
        kp2, des2 = orb.detectAndCompute(img2,None)
        # create BFMatcher object
        bf = cv.BFMatcher(cv.NORM_HAMMING, crossCheck=True)
        # Match descriptors.
        matches = bf.match(des1,des2)
        # Sort them in the order of their distance.
        matches = sorted(matches, key = lambda x:x.distance)
        # Draw 'i' matches.
        i = int(self.BruteForceEdit.text())
        img3 = cv.drawMatches(img1,kp1,img2,kp2,matches[:i],None, flags=2)
        cv.imshow("Matching Features",img3)
        # Save the Image (If asked by the User)
        msgBox = QMessageBox()
        msgBox.setText("Do you want to save the Result?")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
        msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
        msgBox.setDefaultButton(QMessageBox.Save)
        ret = msgBox.exec_()
        if ret == QMessageBox.Save:
            # Save was Clicked
            fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
            cv.imwrite(fileName, img3)
            cv.destroyAllWindows()
        elif ret == QMessageBox.Discard:
            # Discard was Clicked
            cv.destroyAllWindows()
        cv.waitKey()

    def on_BruteFroceSIFTButton_clicked(self):
        # Feature Matching (Found on https://docs.opencv.org/3.4.2/dc/dc3/tutorial_py_matcher.html)
        img1 = cv.resize(Match1,(300,300),interpolation = cv.INTER_AREA)
        img2 = cv.resize(Match2,(300,300),interpolation = cv.INTER_AREA)
        img1 = cv.cvtColor(img1,cv.COLOR_BGR2GRAY)
        img2 = cv.cvtColor(img2,cv.COLOR_BGR2GRAY)
        # Initiate SIFT detector
        sift = cv.xfeatures2d.SIFT_create()
        # Find the keypoints and descriptors with SIFT
        kp1, des1 = sift.detectAndCompute(img1,None)
        kp2, des2 = sift.detectAndCompute(img2,None)
        # BFMatcher with default params
        bf = cv.BFMatcher()
        matches = bf.knnMatch(des1,des2, k=2)
        # Apply ratio test
        good = []
        for m,n in matches:
            if m.distance < 0.75*n.distance:
                good.append([m])
        # cv.drawMatchesKnn expects list of lists as matches.
        img3 = cv.drawMatchesKnn(img1,kp1,img2,kp2,good,None, flags=2)
        cv.imshow("Matching Features",img3)
        # Save the Image (If asked by the User)
        msgBox = QMessageBox()
        msgBox.setText("Do you want to save the Result?")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
        msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
        msgBox.setDefaultButton(QMessageBox.Save)
        ret = msgBox.exec_()
        if ret == QMessageBox.Save:
            # Save was Clicked
            fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
            cv.imwrite(fileName, img3)
            cv.destroyAllWindows()
        elif ret == QMessageBox.Discard:
            # Discard was Clicked
            cv.destroyAllWindows()
        cv.waitKey()

    def on_GrayButton_Video_clicked(self):
        # Save the Image (If asked by the User)
        msgBox = QMessageBox()
        msgBox.setText("Do you want to save the Video after Processing?")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
        msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
        msgBox.setDefaultButton(QMessageBox.Save)
        ret = msgBox.exec_()
        if ret == QMessageBox.Save:
            # Save was Clicked
            fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 's' to Save Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            # Define the codec and create VideoWriter object
            fourcc = cv.VideoWriter_fourcc(*'XVID')
            out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480),0)
            while cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    break
                # Convert RGB Image to Gray
                gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
                out.write(gray)
                cv.imshow('Gray Video', gray)
                if cv.waitKey(1) == ord('s'):
                    break
            # Release everything if job is finished
            cap.release()
            out.release()
            cv.destroyAllWindows()
        elif ret == QMessageBox.Discard:
            # Discard was Clicked
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            while True:
                # Capture frame-by-frame
                ret, frame = cap.read()
                # if frame is read correctly ret is True
                if not ret:
                    break
                # Convert RGB Image to Gray
                gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
                # Display the resulting frame
                cv.imshow('Gray Video', gray)
                if cv.waitKey(1) == ord('q'):
                    break
            # When everything done, release the capture
            cap.release()
            cv.destroyAllWindows()

    def on_HSVButton_Video_clicked(self,frame):
        # Save the Image (If asked by the User)
        msgBox = QMessageBox()
        msgBox.setText("Do you want to save the Video after Processing?")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
        msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
        msgBox.setDefaultButton(QMessageBox.Save)
        ret = msgBox.exec_()
        if ret == QMessageBox.Save:
            # Save was Clicked
            fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 's' to Save Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            # Define the codec and create VideoWriter object
            fourcc = cv.VideoWriter_fourcc(*'XVID')
            out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480))
            while cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    break
                # Convert RGB Image to HSV
                hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)
                out.write(hsv)
                cv.imshow('HSV Video', hsv)
                if cv.waitKey(1) == ord('s'):
                    break
            # Release everything if job is finished
            cap.release()
            out.release()
            cv.destroyAllWindows()
        elif ret == QMessageBox.Discard:
            # Discard was Clicked
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            while True:
                # Capture frame-by-frame
                ret, frame = cap.read()
                # if frame is read correctly ret is True
                if not ret:
                    break
                # Convert RGB Image to HSV
                hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)
                # Display the resulting frame
                cv.imshow('HSV Video', hsv)
                if cv.waitKey(1) == ord('q'):
                    break
            # When everything done, release the capture
            cap.release()
            cv.destroyAllWindows()

    def on_YCbCrButton_Video_clicked(self):
        # Save the Image (If asked by the User)
        msgBox = QMessageBox()
        msgBox.setText("Do you want to save the Video after Processing?")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
        msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
        msgBox.setDefaultButton(QMessageBox.Save)
        ret = msgBox.exec_()
        if ret == QMessageBox.Save:
            # Save was Clicked
            fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 's' to Save Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            # Define the codec and create VideoWriter object
            fourcc = cv.VideoWriter_fourcc(*'XVID')
            out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480))
            while cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    break
                # Convert RGB Image to YCbCr
                YCbCr = cv.cvtColor(frame, cv.COLOR_BGR2YCrCb)
                out.write(YCbCr)
                cv.imshow('YCbCr Video', YCbCr)
                if cv.waitKey(1) == ord('s'):
                    break
            # Release everything if job is finished
            cap.release()
            out.release()
            cv.destroyAllWindows()
        elif ret == QMessageBox.Discard:
            # Discard was Clicked
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            while True:
                # Capture frame-by-frame
                ret, frame = cap.read()
                # if frame is read correctly ret is True
                if not ret:
                    break
                # Convert RGB Image to YCbCr
                YCbCr = cv.cvtColor(frame, cv.COLOR_BGR2YCrCb)
                # Display the resulting frame
                cv.imshow('YCbCr Video', YCbCr)
                if cv.waitKey(1) == ord('q'):
                    break
            # When everything done, release the capture
            cap.release()
            cv.destroyAllWindows()

    def on_YUVButton_Video_clicked(self):
        # Save the Image (If asked by the User)
        msgBox = QMessageBox()
        msgBox.setText("Do you want to save the Video after Processing?")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
        msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
        msgBox.setDefaultButton(QMessageBox.Save)
        ret = msgBox.exec_()
        if ret == QMessageBox.Save:
            # Save was Clicked
            fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 's' to Save Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            # Define the codec and create VideoWriter object
            fourcc = cv.VideoWriter_fourcc(*'XVID')
            out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480))
            while cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    break
                # Convert RGB Image to YUV
                YUV = cv.cvtColor(frame, cv.COLOR_BGR2YUV)
                out.write(YUV)
                cv.imshow('YUV Video', YUV)
                if cv.waitKey(1) == ord('s'):
                    break
            # Release everything if job is finished
            cap.release()
            out.release()
            cv.destroyAllWindows()
        elif ret == QMessageBox.Discard:
            # Discard was Clicked
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            while True:
                # Capture frame-by-frame
                ret, frame = cap.read()
                # if frame is read correctly ret is True
                if not ret:
                    break
                # Convert RGB Image to YUV
                YUV = cv.cvtColor(frame, cv.COLOR_BGR2YUV)
                # Display the resulting frame
                cv.imshow('YUV Video', YUV)
                if cv.waitKey(1) == ord('q'):
                    break
            # When everything done, release the capture
            cap.release()
            cv.destroyAllWindows()

    def on_EqualizeHistogramButton_Video_clicked(self):
        # Save the Image (If asked by the User)
        msgBox = QMessageBox()
        msgBox.setText("Do you want to save the Video after Processing?")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
        msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
        msgBox.setDefaultButton(QMessageBox.Save)
        ret = msgBox.exec_()
        if ret == QMessageBox.Save:
            # Save was Clicked
            fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 's' to Save Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            # Define the codec and create VideoWriter object
            fourcc = cv.VideoWriter_fourcc(*'XVID')
            out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480),0)
            while cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    break
                # Histogram Equalization
                gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
                equ = cv.equalizeHist(gray)
                out.write(equ)
                cv.imshow('Histogram Equalized Video', equ)
                if cv.waitKey(1) == ord('s'):
                    break
            # Release everything if job is finished
            cap.release()
            out.release()
            cv.destroyAllWindows()
        elif ret == QMessageBox.Discard:
            # Discard was Clicked
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            while True:
                # Capture frame-by-frame
                ret, frame = cap.read()
                # if frame is read correctly ret is True
                if not ret:
                    break
                # Histogram Equalization
                gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
                equ = cv.equalizeHist(gray)
                # Display the resulting frame
                cv.imshow('Histogram Equalized Video', equ)
                if cv.waitKey(1) == ord('q'):
                    break
            # When everything done, release the capture
            cap.release()
            cv.destroyAllWindows()

    def on_CannyButton_Video_clicked(self):
        Min = int(self.CannyMinEdit_Video.text())
        Max = int(self.CannyMaxEdit_Video.text())
        # Save the Image (If asked by the User)
        msgBox = QMessageBox()
        msgBox.setText("Do you want to save the Video after Processing?")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
        msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
        msgBox.setDefaultButton(QMessageBox.Save)
        ret = msgBox.exec_()
        if ret == QMessageBox.Save:
            # Save was Clicked
            fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 's' to Save Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            # Define the codec and create VideoWriter object
            fourcc = cv.VideoWriter_fourcc(*'XVID')
            out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480),0)
            while cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    break
                # Canny Edge Detection
                img = cv.cvtColor(frame,cv.COLOR_BGR2GRAY)
                edges = cv.Canny(img,Min,Max)
                out.write(edges)
                cv.imshow('Canny Edges', edges)
                if cv.waitKey(1) == ord('s'):
                    break
            # Release everything if job is finished
            cap.release()
            out.release()
            cv.destroyAllWindows()
        elif ret == QMessageBox.Discard:
            # Discard was Clicked
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            while True:
                # Capture frame-by-frame
                ret, frame = cap.read()
                # if frame is read correctly ret is True
                if not ret:
                    break
                # Canny Edge Detection
                img = cv.cvtColor(frame,cv.COLOR_BGR2GRAY)
                edges = cv.Canny(img,Min,Max)
                # Display the resulting frame
                cv.imshow('Canny Edges', edges)
                if cv.waitKey(1) == ord('q'):
                    break
            # When everything done, release the capture
            cap.release()
            cv.destroyAllWindows()

    def on_SaltnPepperButton_Video_clicked(self):
        # Save the Image (If asked by the User)
        msgBox = QMessageBox()
        msgBox.setText("Do you want to save the Video after Processing?")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
        msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
        msgBox.setDefaultButton(QMessageBox.Save)
        ret = msgBox.exec_()
        if ret == QMessageBox.Save:
            # Save was Clicked
            fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 's' to Save Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            # Define the codec and create VideoWriter object
            fourcc = cv.VideoWriter_fourcc(*'XVID')
            out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480))
            while cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    break
                # Add Salt & Pepper Noise
                row,col,ch = frame.shape
                sNp = 0.6
                amount = float(self.NoiseDensityEdit_Video.text())
                output = np.copy(frame)
                # Salt Noise
                num_salt = np.ceil(amount * frame.size * sNp)
                coords = [np.random.randint(0, i - 1, int(num_salt))
                    for i in frame.shape]
                output[coords] = 1
                # Pepper Noise
                num_pepper = np.ceil(amount* frame.size * (1. - sNp))
                coords = [np.random.randint(0, i - 1, int(num_pepper))
                    for i in frame.shape]
                output[coords] = 0
                out.write(output)
                cv.imshow('Salt & Pepper Noise', output)
                if cv.waitKey(1) == ord('s'):
                    break
            # Release everything if job is finished
            cap.release()
            out.release()
            cv.destroyAllWindows()
        elif ret == QMessageBox.Discard:
            # Discard was Clicked
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
            msgBox.exec_()
            cap = cv.VideoCapture(0)
            while True:
                # Capture frame-by-frame
                ret, frame = cap.read()
                # if frame is read correctly ret is True
                if not ret:
                    break
                # Add Salt & Pepper Noise
                row,col,ch = frame.shape
                sNp = 0.6
                amount = float(self.NoiseDensityEdit_Video.text())
                output = np.copy(frame)
                # Salt Noise
                num_salt = np.ceil(amount * frame.size * sNp)
                coords = [np.random.randint(0, i - 1, int(num_salt))
                    for i in frame.shape]
                output[coords] = 1
                # Pepper Noise
                num_pepper = np.ceil(amount* frame.size * (1. - sNp))
                coords = [np.random.randint(0, i - 1, int(num_pepper))
                    for i in frame.shape]
                output[coords] = 0
                # Display the resulting frame
                cv.imshow('Salt & Pepper Noise', output)
                if cv.waitKey(1) == ord('q'):
                    break
            # When everything done, release the capture
            cap.release()
            cv.destroyAllWindows()

    def on_DilationButton_Video_clicked(self):
        # Get Kernel size from the user
        k = int(self.MorphoKernelEdit_Video.text())
        if k % 2 == 0:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()
        else:
            # Save the Image (If asked by the User)
            msgBox = QMessageBox()
            msgBox.setText("Do you want to save the Video after Processing?")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
            msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
            msgBox.setDefaultButton(QMessageBox.Save)
            ret = msgBox.exec_()
            if ret == QMessageBox.Save:
                # Save was Clicked
                fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
                # Show the Message
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 's' to Save Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                # Define the codec and create VideoWriter object
                fourcc = cv.VideoWriter_fourcc(*'XVID')
                out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480),0)
                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break
                    # Dilation
                    img = cv.medianBlur(frame,k)
                    gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
                    th3 = cv.adaptiveThreshold(gray,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,11,2)
                    kernel = np.ones((k,k),np.uint8)
                    dilation = cv.dilate(th3,kernel,iterations = 1)
                    out.write(dilation)
                    cv.imshow('Dilated Video', dilation)
                    if cv.waitKey(1) == ord('s'):
                        break
                # Release everything if job is finished
                cap.release()
                out.release()
                cv.destroyAllWindows()
            elif ret == QMessageBox.Discard:
                # Discard was Clicked
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                while True:
                    # Capture frame-by-frame
                    ret, frame = cap.read()
                    # if frame is read correctly ret is True
                    if not ret:
                        break
                    # Dilation
                    img = cv.medianBlur(frame,k)
                    gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
                    th3 = cv.adaptiveThreshold(gray,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,11,2)
                    kernel = np.ones((k,k),np.uint8)
                    dilation = cv.dilate(th3,kernel,iterations = 1)
                    # Display the resulting frame
                    cv.imshow('Dilated Video', dilation)
                    if cv.waitKey(1) == ord('q'):
                        break
                # When everything done, release the capture
                cap.release()
                cv.destroyAllWindows()

    def on_ErosionButton_Video_clicked(self):
        # Get Kernel size from the user
        k = int(self.MorphoKernelEdit_Video.text())
        if k % 2 == 0:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()
        else:
            # Save the Image (If asked by the User)
            msgBox = QMessageBox()
            msgBox.setText("Do you want to save the Video after Processing?")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
            msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
            msgBox.setDefaultButton(QMessageBox.Save)
            ret = msgBox.exec_()
            if ret == QMessageBox.Save:
                # Save was Clicked
                fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
                # Show the Message
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 's' to Save Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                # Define the codec and create VideoWriter object
                fourcc = cv.VideoWriter_fourcc(*'XVID')
                out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480),0)
                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break
                    # Erosion
                    img = cv.medianBlur(frame,k)
                    gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
                    th3 = cv.adaptiveThreshold(gray,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,11,2)
                    kernel = np.ones((k,k),np.uint8)
                    erosion = cv.erode(th3,kernel,iterations = 1)
                    out.write(erosion)
                    cv.imshow('Eroded Video', erosion)
                    if cv.waitKey(1) == ord('s'):
                        break
                # Release everything if job is finished
                cap.release()
                out.release()
                cv.destroyAllWindows()
            elif ret == QMessageBox.Discard:
                # Discard was Clicked
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                while True:
                    # Capture frame-by-frame
                    ret, frame = cap.read()
                    # if frame is read correctly ret is True
                    if not ret:
                        break
                    # Erosion
                    img = cv.medianBlur(frame,k)
                    gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
                    th3 = cv.adaptiveThreshold(gray,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,11,2)
                    kernel = np.ones((k,k),np.uint8)
                    erosion = cv.erode(th3,kernel,iterations = 1)
                    # Display the resulting frame
                    cv.imshow('Eroded Video', erosion)
                    if cv.waitKey(1) == ord('q'):
                        break
                # When everything done, release the capture
                cap.release()
                cv.destroyAllWindows()

    def on_OpeningButton_Video_clicked(self):
        # Get Kernel size from the user
        k = int(self.MorphoKernelEdit_Video.text())
        if k % 2 == 0:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()
        else:
            # Save the Image (If asked by the User)
            msgBox = QMessageBox()
            msgBox.setText("Do you want to save the Video after Processing?")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
            msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
            msgBox.setDefaultButton(QMessageBox.Save)
            ret = msgBox.exec_()
            if ret == QMessageBox.Save:
                # Save was Clicked
                fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
                # Show the Message
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 's' to Save Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                # Define the codec and create VideoWriter object
                fourcc = cv.VideoWriter_fourcc(*'XVID')
                out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480),0)
                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break
                    # Opening
                    img = cv.medianBlur(frame,k)
                    gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
                    th3 = cv.adaptiveThreshold(gray,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,11,2)
                    kernel = np.ones((k,k),np.uint8)
                    opening = cv.morphologyEx(th3, cv.MORPH_OPEN, kernel)
                    out.write(opening)
                    cv.imshow('Opened Video', opening)
                    if cv.waitKey(1) == ord('s'):
                        break
                # Release everything if job is finished
                cap.release()
                out.release()
                cv.destroyAllWindows()
            elif ret == QMessageBox.Discard:
                # Discard was Clicked
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                while True:
                    # Capture frame-by-frame
                    ret, frame = cap.read()
                    # if frame is read correctly ret is True
                    if not ret:
                        break
                    # Opening
                    img = cv.medianBlur(frame,k)
                    gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
                    th3 = cv.adaptiveThreshold(gray,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,11,2)
                    kernel = np.ones((k,k),np.uint8)
                    opening = cv.morphologyEx(th3, cv.MORPH_OPEN, kernel)
                    # Display the resulting frame
                    cv.imshow('Opened Video', opening)
                    if cv.waitKey(1) == ord('q'):
                        break
                # When everything done, release the capture
                cap.release()
                cv.destroyAllWindows()

    def on_ClosingButton_Video_clicked(self):
        # Get Kernel size from the user
        k = int(self.MorphoKernelEdit_Video.text())
        if k % 2 == 0:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()
        else:
            # Save the Image (If asked by the User)
            msgBox = QMessageBox()
            msgBox.setText("Do you want to save the Video after Processing?")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
            msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
            msgBox.setDefaultButton(QMessageBox.Save)
            ret = msgBox.exec_()
            if ret == QMessageBox.Save:
                # Save was Clicked
                fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
                # Show the Message
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 's' to Save Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                # Define the codec and create VideoWriter object
                fourcc = cv.VideoWriter_fourcc(*'XVID')
                out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480),0)
                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break
                    # Closing
                    img = cv.medianBlur(frame,k)
                    gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
                    th3 = cv.adaptiveThreshold(gray,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,11,2)
                    kernel = np.ones((k,k),np.uint8)
                    closing = cv.morphologyEx(th3, cv.MORPH_CLOSE, kernel)
                    out.write(closing)
                    cv.imshow('Closed Video', closing)
                    if cv.waitKey(1) == ord('s'):
                        break
                # Release everything if job is finished
                cap.release()
                out.release()
                cv.destroyAllWindows()
            elif ret == QMessageBox.Discard:
                # Discard was Clicked
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                while True:
                    # Capture frame-by-frame
                    ret, frame = cap.read()
                    # if frame is read correctly ret is True
                    if not ret:
                        break
                    # Closing
                    img = cv.medianBlur(frame,k)
                    gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
                    th3 = cv.adaptiveThreshold(gray,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,11,2)
                    kernel = np.ones((k,k),np.uint8)
                    closing = cv.morphologyEx(th3, cv.MORPH_CLOSE, kernel)
                    # Display the resulting frame
                    cv.imshow('Closed Video', closing)
                    if cv.waitKey(1) == ord('q'):
                        break
                # When everything done, release the capture
                cap.release()
                cv.destroyAllWindows()

    def on_AveragingButton_Video_clicked(self):
        # Get Kernel size from the user
        k = int(self.BlurKernelEdit_Video.text())
        if k % 2 == 0:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()
        else:
            # Save the Image (If asked by the User)
            msgBox = QMessageBox()
            msgBox.setText("Do you want to save the Video after Processing?")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
            msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
            msgBox.setDefaultButton(QMessageBox.Save)
            ret = msgBox.exec_()
            if ret == QMessageBox.Save:
                # Save was Clicked
                fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
                # Show the Message
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 's' to Save Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                # Define the codec and create VideoWriter object
                fourcc = cv.VideoWriter_fourcc(*'XVID')
                out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480))
                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break
                    # Averaging
                    avg = cv.blur(frame,(k,k))
                    out.write(avg)
                    cv.imshow('Averaging Blur', avg)
                    if cv.waitKey(1) == ord('s'):
                        break
                # Release everything if job is finished
                cap.release()
                out.release()
                cv.destroyAllWindows()
            elif ret == QMessageBox.Discard:
                # Discard was Clicked
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                while True:
                    # Capture frame-by-frame
                    ret, frame = cap.read()
                    # if frame is read correctly ret is True
                    if not ret:
                        break
                    # Averaging
                    avg = cv.blur(frame,(k,k))
                    # Display the resulting frame
                    cv.imshow('Averaging Blur', avg)
                    if cv.waitKey(1) == ord('q'):
                        break
                # When everything done, release the capture
                cap.release()
                cv.destroyAllWindows()

    def on_MedianButton_Video_clicked(self):
        # Get Kernel size from the user
        k = int(self.BlurKernelEdit_Video.text())
        if k % 2 == 0:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()
        else:
            # Save the Image (If asked by the User)
            msgBox = QMessageBox()
            msgBox.setText("Do you want to save the Video after Processing?")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
            msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
            msgBox.setDefaultButton(QMessageBox.Save)
            ret = msgBox.exec_()
            if ret == QMessageBox.Save:
                # Save was Clicked
                fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
                # Show the Message
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 's' to Save Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                # Define the codec and create VideoWriter object
                fourcc = cv.VideoWriter_fourcc(*'XVID')
                out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480))
                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break
                    # Median
                    median = cv.medianBlur(frame,k)
                    out.write(median)
                    cv.imshow('Median Blur', median)
                    if cv.waitKey(1) == ord('s'):
                        break
                # Release everything if job is finished
                cap.release()
                out.release()
                cv.destroyAllWindows()
            elif ret == QMessageBox.Discard:
                # Discard was Clicked
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                while True:
                    # Capture frame-by-frame
                    ret, frame = cap.read()
                    # if frame is read correctly ret is True
                    if not ret:
                        break
                    # Median
                    median = cv.medianBlur(frame,k)
                    # Display the resulting frame
                    cv.imshow('Median Blur', median)
                    if cv.waitKey(1) == ord('q'):
                        break
                # When everything done, release the capture
                cap.release()
                cv.destroyAllWindows()

    def on_GaussianBlurButton_Video_clicked(self):
        # Get Kernel size from the user
        k = int(self.BlurKernelEdit_Video.text())
        if k % 2 == 0:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()
        else:
            # Save the Image (If asked by the User)
            msgBox = QMessageBox()
            msgBox.setText("Do you want to save the Video after Processing?")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
            msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
            msgBox.setDefaultButton(QMessageBox.Save)
            ret = msgBox.exec_()
            if ret == QMessageBox.Save:
                # Save was Clicked
                fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
                # Show the Message
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 's' to Save Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                # Define the codec and create VideoWriter object
                fourcc = cv.VideoWriter_fourcc(*'XVID')
                out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480))
                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break
                    # Gaussian Blur
                    gauss = cv.GaussianBlur(frame,(k,k),0)
                    out.write(gauss)
                    cv.imshow('Gaussian Blur', gauss)
                    if cv.waitKey(1) == ord('s'):
                        break
                # Release everything if job is finished
                cap.release()
                out.release()
                cv.destroyAllWindows()
            elif ret == QMessageBox.Discard:
                # Discard was Clicked
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                while True:
                    # Capture frame-by-frame
                    ret, frame = cap.read()
                    # if frame is read correctly ret is True
                    if not ret:
                        break
                    # Gaussian Blur
                    gauss = cv.GaussianBlur(frame,(k,k),0)
                    # Display the resulting frame
                    cv.imshow('Gaussian Blur', gauss)
                    if cv.waitKey(1) == ord('q'):
                        break
                # When everything done, release the capture
                cap.release()
                cv.destroyAllWindows()

    def on_BilateralButton_Video_clicked(self):
        # Get Kernel size from the user
        k = int(self.BlurKernelEdit_Video.text())
        # Get Sigma from the user
        S = int(self.BilatSigmaEdit_Video.text())
        if k % 2 == 0:
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("Kernel size cannot be Even!")
            msgBox.exec_()
        else:
            # Save the Image (If asked by the User)
            msgBox = QMessageBox()
            msgBox.setText("Do you want to save the Video after Processing?")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
            msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
            msgBox.setDefaultButton(QMessageBox.Save)
            ret = msgBox.exec_()
            if ret == QMessageBox.Save:
                # Save was Clicked
                fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
                # Show the Message
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 's' to Save Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                # Define the codec and create VideoWriter object
                fourcc = cv.VideoWriter_fourcc(*'XVID')
                out = cv.VideoWriter(fileName, fourcc, 20.0, (640,  480), true)
                while cap.isOpened():
                    ret, frame = cap.read()
                    if not ret:
                        break
                    # Bilateral
                    blur = cv.bilateralFilter(frame,k,S,S)
                    out.write(blur)
                    cv.imshow('Bilateral Blur', blur)
                    if cv.waitKey(1) == ord('s'):
                        break
                # Release everything if job is finished
                cap.release()
                out.release()
                cv.destroyAllWindows()
            elif ret == QMessageBox.Discard:
                # Discard was Clicked
                msgBox = QMessageBox()
                msgBox.setText("Attention!")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setInformativeText("Press 'q' to Quit Video after Capture")
                msgBox.exec_()
                cap = cv.VideoCapture(0)
                while True:
                    # Capture frame-by-frame
                    ret, frame = cap.read()
                    # if frame is read correctly ret is True
                    if not ret:
                        break
                    # Bilateral
                    blur = cv.bilateralFilter(frame,k,S,S)
                    # Display the resulting frame
                    cv.imshow('Bilateral Blur', blur)
                    if cv.waitKey(1) == ord('q'):
                        break
                # When everything done, release the capture
                cap.release()
                cv.destroyAllWindows()

    def on_CalibLoadImagesButton_clicked(self):
        # Load the Folder with Picker
        dir = QFileDialog.getExistingDirectory(IPCVToolBox,"Select a Folder with Calibration Images","",  QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks)
        global dirCalib
        dirCalib = dir
        if dirCalib is not None:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Image Folder Selected")
            msgBox.exec_()
            self.CalibrateButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Image Folder Selected!!!")
            msgBox.exec_()

    def on_CalibCaptureImagesButton_clicked(self):
        # Show the Message
        msgBox = QMessageBox()
        msgBox.setText("Attention!")
        msgBox.setStyleSheet("QLabel{min-width:400 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
        msgBox.setInformativeText("Select an Empty Folder to Save Captured Images")
        msgBox.exec_()
        dir = QFileDialog.getExistingDirectory(IPCVToolBox,"Select a Folder to Save Captured Images","",  QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks)
        global dirCalib
        dirCalib = dir
        # Show the Message
        msgBox = QMessageBox()
        msgBox.setText("Attention!")
        msgBox.setStyleSheet("QLabel{min-width:400 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
        msgBox.setInformativeText("Repeatedly Move the Calibration Pattern and Press 'c' to Capture, Press 'q' to Quit Camera Frame")
        msgBox.exec_()
        cap = cv.VideoCapture(0)
        i=0 # To Save all Captured Images
        while(True):
            ret, frame = cap.read()
            cv.imshow("Camera",frame)
            key=cv.waitKey(30)
            if key==ord('q'):
                break
            if key==ord('c'):
                i+=1
                cv.imshow("Captured Image",frame)
                cv.imwrite(dirCalib+'/'+str(i)+'.jpg', frame)
                self.CalibrateButton.setEnabled(True)
        # Release the capture
        cap.release()
        cv.destroyAllWindows()

    def on_CalibrateButton_clicked(self):
        # Camera Calibration (Found on https://docs.opencv.org/3.4.2/dc/dbb/tutorial_py_calibration.html)
        # Termination criteria
        criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001)
        r = int(self.CalibRowsEdit.text())
        c = int(self.CalibColumnEdit.text())
        # Prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)
        objp = np.zeros((c*r,3), np.float32)
        objp[:,:2] = np.mgrid[0:r,0:c].T.reshape(-1,2)
        # Arrays to store object points and image points from all the images.
        objpoints = [] # 3d point in real world space
        imgpoints = [] # 2d points in image plane.
        images = []
        for ext in ('*.gif', '*.png', '*.jpg', '*.jpeg', '*.JPG', '*.tif', '*.tiff', '*.bmp'):
            images.extend(glob(join(dirCalib, ext)))
        if images is not None:
            for fname in images:
                img = cv.imread(fname)
                gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
                # Find the chess board corners
                ret, corners = cv.findChessboardCorners(gray, (r,c), None)
                # If found, add object points, image points (after refining them)
                if ret == True:
                    objpoints.append(objp)
                    corners2 = cv.cornerSubPix(gray,corners, (11,11), (-1,-1), criteria)
                    imgpoints.append(corners)
                    # Draw and display the corners
                    cv.drawChessboardCorners(img, (r,c), corners2, ret)
                    cv.imshow('Showing Corners', img)
                    cv.waitKey(500)
            cv.destroyAllWindows()
            ret, mtx, dist, rvecs, tvecs = cv.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)
            global CMtx
            CMtx = mtx
            global Dist
            Dist = dist
            # Show Camera Matrix
            C1 = str(Decimal(mtx[0,0]).quantize(Decimal("1.000")))
            C2 = str(Decimal(mtx[0,1]).quantize(Decimal("1.000")))
            C3 = str(Decimal(mtx[0,2]).quantize(Decimal("1.000")))
            C4 = str(Decimal(mtx[1,0]).quantize(Decimal("1.000")))
            C5 = str(Decimal(mtx[1,1]).quantize(Decimal("1.000")))
            C6 = str(Decimal(mtx[1,2]).quantize(Decimal("1.000")))
            C7 = str(Decimal(mtx[2,0]).quantize(Decimal("1.000")))
            C8 = str(Decimal(mtx[2,1]).quantize(Decimal("1.000")))
            C9 = str(Decimal(mtx[2,2]).quantize(Decimal("1.000")))
            self.C1Edit.setText(C1)
            self.C2Edit.setText(C2)
            self.C3Edit.setText(C3)
            self.C4Edit.setText(C4)
            self.C5Edit.setText(C5)
            self.C6Edit.setText(C6)
            self.C7Edit.setText(C7)
            self.C8Edit.setText(C8)
            self.C9Edit.setText(C9)
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Camera Calibrated")
            msgBox.exec_()
            self.UndistortLoadImageButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:400 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("No Images Found in the Specified Folder!!!")
            msgBox.exec_()

    def on_UndistortLoadImageButton_clicked(self):
        # Load an Image with File Picker
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select an Image from Calibration Images","","Image Files (*.jpg *.jpeg *.JPG *.tif *.tiff *.png *.bmp)", options=options)
        # Read the Image
        img = cv.imread(fileName)
        global Undistort
        Undistort = img
        if Undistort is not None:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Image Loaded Successfully")
            msgBox.exec_()
            self.UndistortButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Image Loaded!!!")
            msgBox.exec_()

    def on_UndistortButton_clicked(self):
        # Undistort Image using Calibration (Found on https://docs.opencv.org/3.4.2/dc/dbb/tutorial_py_calibration.html)
        h,  w = Undistort.shape[:2]
        newcameramtx, roi = cv.getOptimalNewCameraMatrix(CMtx, Dist, (w,h), 1, (w,h))
        # Undistort
        mapx, mapy = cv.initUndistortRectifyMap(CMtx, Dist, None, newcameramtx, (w,h), 5)
        dst = cv.remap(Undistort, mapx, mapy, cv.INTER_LINEAR)
        # Crop the image
        x, y, w, h = roi
        dst = dst[y:y+h, x:x+w]
        show_N_save(Undistort, dst, "Original Image", "Undistorted Image")

    def on_FMLoadImage1Button_clicked(self):
        # Load an Image with File Picker
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select Image - 1","","Image Files (*.jpg *.jpeg *.JPG *.tif *.tiff *.png *.bmp)", options=options)
        # Read the Image
        img = cv.imread(fileName)
        global FMImg1
        FMImg1 = img
        if FMImg1 is not None:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Image - 1 Loaded Successfully")
            msgBox.exec_()
            self.FMLoadImage2Button.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Image Loaded!!!")
            msgBox.exec_()

    def on_FMLoadImage2Button_clicked(self):
        # Load an Image with File Picker
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select Image - 2","","Image Files (*.jpg *.jpeg *.JPG *.tif *.tiff *.png *.bmp)", options=options)
        # Read the Image
        img = cv.imread(fileName)
        global FMImg2
        FMImg2 = img
        if FMImg2 is not None:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Image - 2 Loaded Successfully")
            msgBox.exec_()
            self.FMComputeButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Image Loaded!!!")
            msgBox.exec_()

    def on_FMCaptureImagesButton_clicked(self):
        # Show the Message
        msgBox = QMessageBox()
        msgBox.setText("Attention!")
        msgBox.setStyleSheet("QLabel{min-width:400 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
        msgBox.setInformativeText("Capture an Image Move the Camera and Capture again. Press 'c' to Capture, Press 'q' to Quit Camera Frame")
        msgBox.exec_()
        cap = cv.VideoCapture(0)
        i=0 # To Save all Captured Images
        while(True):
            ret, frame = cap.read()
            cv.imshow("Camera",frame)
            key=cv.waitKey(30)
            if key==ord('q'):
                break
            if key==ord('c'):
                i+=1
                cv.imshow("Captured Image",frame)
                if i == 1:
                    global FMImg1
                    FMImg1 = frame
                elif i == 2:
                    global FMImg2
                    FMImg2 = frame
                    self.FMComputeButton.setEnabled(True)
                else:
                    break
        # Release the capture
        cap.release()
        cv.destroyAllWindows()

    def on_FMComputeButton_clicked(self):
        # Fundamental Matrix (Found on https://docs.opencv.org/3.4.2/da/de9/tutorial_py_epipolar_geometry.html)
        img1 = cv.cvtColor(FMImg1, cv.COLOR_BGR2GRAY) # left image
        img2 = cv.cvtColor(FMImg2, cv.COLOR_BGR2GRAY) # right image
        sift = cv.xfeatures2d.SIFT_create()
        # find the keypoints and descriptors with SIFT
        kp1, des1 = sift.detectAndCompute(img1,None)
        kp2, des2 = sift.detectAndCompute(img2,None)
        # FLANN parameters
        FLANN_INDEX_KDTREE = 1
        index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)
        search_params = dict(checks=50)
        flann = cv.FlannBasedMatcher(index_params,search_params)
        matches = flann.knnMatch(des1,des2,k=2)
        good = []
        pts1 = []
        pts2 = []
        # ratio test as per Lowe's paper
        for i,(m,n) in enumerate(matches):
            if m.distance < 0.8*n.distance:
                good.append(m)
                pts2.append(kp2[m.trainIdx].pt)
                pts1.append(kp1[m.queryIdx].pt)
        pts1 = np.int32(pts1)
        pts2 = np.int32(pts2)
        if self.FM7PointButton.isChecked() == True:
            F, mask = cv.findFundamentalMat(pts1,pts2,cv.FM_7POINT)
        elif self.FM8PointButton.isChecked() == True:
            F, mask = cv.findFundamentalMat(pts1,pts2,cv.FM_8POINT)
        elif self.FMRANSACButton.isChecked() == True:
            F, mask = cv.findFundamentalMat(pts1,pts2,cv.FM_RANSAC)
        # We select only inlier points
        pts1 = pts1[mask.ravel()==1]
        pts2 = pts2[mask.ravel()==1]
        global Pts1
        Pts1 = pts1
        global Pts2
        Pts2 = pts2
        global FM
        FM = F
        # Show Fundamental Matrix
        F1 = str(Decimal(F[0,0]).quantize(Decimal("1.000000")))
        F2 = str(Decimal(F[0,1]).quantize(Decimal("1.000000")))
        F3 = str(Decimal(F[0,2]).quantize(Decimal("1.000000")))
        F4 = str(Decimal(F[1,0]).quantize(Decimal("1.000000")))
        F5 = str(Decimal(F[1,1]).quantize(Decimal("1.000000")))
        F6 = str(Decimal(F[1,2]).quantize(Decimal("1.000000")))
        F7 = str(Decimal(F[2,0]).quantize(Decimal("1.000000")))
        F8 = str(Decimal(F[2,1]).quantize(Decimal("1.000000")))
        F9 = str(Decimal(F[2,2]).quantize(Decimal("1.000000")))
        self.F1Edit.setText(F1)
        self.F2Edit.setText(F2)
        self.F3Edit.setText(F3)
        self.F4Edit.setText(F4)
        self.F5Edit.setText(F5)
        self.F6Edit.setText(F6)
        self.F7Edit.setText(F7)
        self.F8Edit.setText(F8)
        self.F9Edit.setText(F9)
        # Show the Message
        msgBox = QMessageBox()
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
        msgBox.setText("Fundamental Matrix Computed")
        msgBox.exec_()
        self.DrawEpipolarButton.setEnabled(True)

    def on_DrawEpipolarButton_clicked(self):
        # Epipolar (Found on https://docs.opencv.org/3.4.2/da/de9/tutorial_py_epipolar_geometry.html)
        # Find epilines corresponding to points in right image (second image) and drawing its lines on left image
        lines1 = cv.computeCorrespondEpilines(Pts2.reshape(-1,1,2), 2,FM)
        lines1 = lines1.reshape(-1,3)
        img5,img6 = drawLines(FMImg1,FMImg2,lines1,Pts1,Pts2)
        # Find epilines corresponding to points in left image (first image) and drawing its lines on right image
        lines2 = cv.computeCorrespondEpilines(Pts1.reshape(-1,1,2), 1,FM)
        lines2 = lines2.reshape(-1,3)
        img3,img4 = drawLines(FMImg2,FMImg1,lines2,Pts2,Pts1)
        show_N_save(img5, img3, "Left Image", "Right Image")

    def on_HMLoadImage1Button_clicked(self):
        # Load an Image with File Picker
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select Image - 1","","Image Files (*.jpg *.jpeg *.JPG *.tif *.tiff *.png *.bmp)", options=options)
        # Read the Image
        img = cv.imread(fileName)
        global HMImg1
        HMImg1 = img
        if HMImg1 is not None:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Image - 1 Loaded Successfully")
            msgBox.exec_()
            self.HMLoadImage2Button.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Image Loaded!!!")
            msgBox.exec_()

    def on_HMLoadImage2Button_clicked(self):
        # Load an Image with File Picker
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select Image - 2","","Image Files (*.jpg *.jpeg *.JPG *.tif *.tiff *.png *.bmp)", options=options)
        # Read the Image
        img = cv.imread(fileName)
        global HMImg2
        HMImg2 = img
        if HMImg2 is not None:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Image - 2 Loaded Successfully")
            msgBox.exec_()
            self.HMComputeButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Image Loaded!!!")
            msgBox.exec_()

    def on_HMCaptureImagesButton_clicked(self):
        # Show the Message
        msgBox = QMessageBox()
        msgBox.setText("Attention!")
        msgBox.setStyleSheet("QLabel{min-width:400 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
        msgBox.setInformativeText("Capture an Image Rotate the Camera and Capture again. Press 'c' to Capture, Press 'q' to Quit Camera Frame")
        msgBox.exec_()
        cap = cv.VideoCapture(0)
        i=0 # To Save all Captured Images
        while(True):
            ret, frame = cap.read()
            cv.imshow("Camera",frame)
            key=cv.waitKey(30)
            if key==ord('q'):
                break
            if key==ord('c'):
                i+=1
                cv.imshow("Captured Image",frame)
                if i == 1:
                    global HMImg1
                    HMImg1 = frame
                elif i == 2:
                    global HMImg2
                    HMImg2 = frame
                    self.HMComputeButton.setEnabled(True)
                else:
                    break
        # Release the capture
        cap.release()
        cv.destroyAllWindows()

    def on_HMComputeButton_clicked(self):
        # Image Alignment (Found on https://www.learnopencv.com/image-alignment-feature-based-using-opencv-c-python/)
        # Compute Homography
        MAX_FEATURES = 500
        GOOD_MATCH_PERCENT = 0.15
        # Convert images to grayscale
        im1Gray = cv.cvtColor(HMImg1, cv.COLOR_BGR2GRAY)
        im2Gray = cv.cvtColor(HMImg2, cv.COLOR_BGR2GRAY)
        # Detect ORB features and compute descriptors.
        orb = cv.ORB_create(MAX_FEATURES)
        keypoints1, descriptors1 = orb.detectAndCompute(im1Gray, None)
        keypoints2, descriptors2 = orb.detectAndCompute(im2Gray, None)
        # Match Features
        matcher = cv.DescriptorMatcher_create(cv.DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMING)
        matches = matcher.match(descriptors1, descriptors2, None)
        # Sort matches by score
        matches.sort(key=lambda x: x.distance, reverse=False)
        # Remove not so good matches
        numGoodMatches = int(len(matches) * GOOD_MATCH_PERCENT)
        matches = matches[:numGoodMatches]
        # Extract location of good matches
        points1 = np.zeros((len(matches), 2), dtype=np.float32)
        points2 = np.zeros((len(matches), 2), dtype=np.float32)
        for i, match in enumerate(matches):
            points1[i, :] = keypoints1[match.queryIdx].pt
            points2[i, :] = keypoints2[match.trainIdx].pt
        # Find homography
        H, mask = cv.findHomography(points1, points2, cv.RANSAC)
        global HM
        HM = H
        # Show Homography Matrix
        H1 = str(Decimal(H[0,0]).quantize(Decimal("1.000000")))
        H2 = str(Decimal(H[0,1]).quantize(Decimal("1.000000")))
        H3 = str(Decimal(H[0,2]).quantize(Decimal("1.000000")))
        H4 = str(Decimal(H[1,0]).quantize(Decimal("1.000000")))
        H5 = str(Decimal(H[1,1]).quantize(Decimal("1.000000")))
        H6 = str(Decimal(H[1,2]).quantize(Decimal("1.000000")))
        H7 = str(Decimal(H[2,0]).quantize(Decimal("1.000000")))
        H8 = str(Decimal(H[2,1]).quantize(Decimal("1.000000")))
        H9 = str(Decimal(H[2,2]).quantize(Decimal("1.000000")))
        self.H1Edit.setText(H1)
        self.H2Edit.setText(H2)
        self.H3Edit.setText(H3)
        self.H4Edit.setText(H4)
        self.H5Edit.setText(H5)
        self.H6Edit.setText(H6)
        self.H7Edit.setText(H7)
        self.H8Edit.setText(H8)
        self.H9Edit.setText(H9)
        # Show the Message
        msgBox = QMessageBox()
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
        msgBox.setText("Homography Computed")
        msgBox.exec_()
        self.MosaicButton.setEnabled(True)

    def on_MosaicButton_clicked(self):
        # Mosaic (Align Images)
        height, width, channels = HMImg2.shape
        im1Reg = cv.warpPerspective(HMImg1, HM, (width, height))
        cv.imshow("Mosaic Image",im1Reg)
        # Save the Image (If asked by the User)
        msgBox = QMessageBox()
        msgBox.setText("Do you want to save the Result?")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
        msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
        msgBox.setDefaultButton(QMessageBox.Save)
        ret = msgBox.exec_()
        if ret == QMessageBox.Save:
            # Save was Clicked
            fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
            cv.imwrite(fileName, im1Reg)
            cv.destroyAllWindows()
        elif ret == QMessageBox.Discard:
            # Discard was Clicked
            cv.destroyAllWindows()
        cv.waitKey()

    def on_StitchLoadImagesButton_clicked(self):
        # Load the Folder with Picker
        dir = QFileDialog.getExistingDirectory(IPCVToolBox,"Select a Folder with Panaromic Images to Stitch","",  QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks)
        global dirStitch
        dirStitch = dir
        if dirStitch is not None:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Image Folder Selected")
            msgBox.exec_()
            self.StitchImagesButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Image Folder Selected!!!")
            msgBox.exec_()

    def on_StitchCaptureImagesButton_clicked(self):
        # Show the Message
        msgBox = QMessageBox()
        msgBox.setText("Attention!")
        msgBox.setStyleSheet("QLabel{min-width:400 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
        msgBox.setInformativeText("Select an Empty Folder to Save Captured Images")
        msgBox.exec_()
        dir = QFileDialog.getExistingDirectory(IPCVToolBox,"Select a Folder to Save Captured Images","",  QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks)
        global dirStitch
        dirStitch = dir
        # Show the Message
        msgBox = QMessageBox()
        msgBox.setText("Attention!")
        msgBox.setStyleSheet("QLabel{min-width:400 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
        msgBox.setInformativeText("Move the Camera in a Panaromic View and Press 'c' to Capture, Press 'q' to Quit Camera Frame")
        msgBox.exec_()
        cap = cv.VideoCapture(0)
        i=0 # To Save all Captured Images
        while(True):
            ret, frame = cap.read()
            cv.imshow("Camera",frame)
            key=cv.waitKey(30)
            if key==ord('q'):
                break
            if key==ord('c'):
                i+=1
                cv.imshow("Captured Image",frame)
                cv.imwrite(dirStitch+'/'+str(i)+'.jpg', frame)
                self.StitchImagesButton.setEnabled(True)
        # Release the capture
        cap.release()
        cv.destroyAllWindows()

    def on_StitchImagesButton_clicked(self):
        # Panaroma Stitching (Found on https://www.pyimagesearch.com/2018/12/17/image-stitching-with-opencv-and-python/)
        imagePath = []
        for ext in ('*.gif', '*.png', '*.jpg', '*.jpeg', '*.JPG', '*.tif', '*.tiff', '*.bmp'):
            imagePath.extend(glob(join(dirStitch, ext)))
        if imagePath is not None:
            # loop over the image paths, load each one, and add them to images to stich list
            images = []
            for fname in imagePath:
                img = cv.imread(fname)
                images.append(img)
            # initialize OpenCV's image sticher object and then perform the image stitching
            stitcher = cv.createStitcher() if imutils.is_cv3() else cv.Stitcher_create()
            (status, stitched) = stitcher.stitch(images)

            # if the status is '0', then OpenCV successfully performed image stitching
            if status == 0:
                # check to see if we supposed to crop out the largest rectangular region from the stitched image create a 10 pixel border surrounding the stitched image
                stitched = cv.copyMakeBorder(stitched, 10, 10, 10, 10, cv.BORDER_CONSTANT, (0, 0, 0))
                # convert the stitched image to grayscale and threshold it such that all pixels greater than zero are set to 255 (foreground) while all others remain 0 (background)
                gray = cv.cvtColor(stitched, cv.COLOR_BGR2GRAY)
                thresh = cv.threshold(gray, 0, 255, cv.THRESH_BINARY)[1]
                # find all external contours in the threshold image then find the *largest* contour which will be the contour/outline of the stitched image
                cnts = cv.findContours(thresh.copy(), cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
                cnts = imutils.grab_contours(cnts)
                c = max(cnts, key=cv.contourArea)
                # allocate memory for the mask which will contain the rectangular bounding box of the stitched image region
                mask = np.zeros(thresh.shape, dtype="uint8")
                (x, y, w, h) = cv.boundingRect(c)
                cv.rectangle(mask, (x, y), (x + w, y + h), 255, -1)
                # create two copies of the mask: one to serve as our actual minimum rectangular region and another to serve as a counter for how many pixels need to be removed to form the minimum rectangular region
                minRect = mask.copy()
                sub = mask.copy()
                # keep looping until there are no non-zero pixels left in the subtracted image
                while cv.countNonZero(sub) > 0:
                    # erode the minimum rectangular mask and then subtract the thresholded image from the minimum rectangular mask so we can count if there are any non-zero pixels left
                    minRect = cv.erode(minRect, None)
                    sub = cv.subtract(minRect, thresh)
                # find contours in the minimum rectangular mask and then extract the bounding box (x, y)-coordinates
                cnts = cv.findContours(minRect.copy(), cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
                cnts = imutils.grab_contours(cnts)
                c = max(cnts, key=cv.contourArea)
                (x, y, w, h) = cv.boundingRect(c)
                # use the bounding box coordinates to extract the our final stitched image
                stitched = stitched[y:y + h, x:x + w]
                cv.imshow("Stitched Image",stitched)
                # Save the Image (If asked by the User)
                msgBox = QMessageBox()
                msgBox.setText("Do you want to save the Result?")
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
                msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
                msgBox.setDefaultButton(QMessageBox.Save)
                ret = msgBox.exec_()
                if ret == QMessageBox.Save:
                    # Save was Clicked
                    fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
                    cv.imwrite(fileName, im1Reg)
                    cv.destroyAllWindows()
                elif ret == QMessageBox.Discard:
                    # Discard was Clicked
                    cv.destroyAllWindows()
                cv.waitKey()
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:400 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("No Images Found in the Specified Folder!!!")
            msgBox.exec_()

    def on_FaceClassifierButton_clicked(self):
        # Load the .xml file with File Picker
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select Face Pre-trained Classifier","","*.xml", options=options)
        global FaceXML
        FaceXML = fileName
        if isfile(FaceXML):
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Face Pre-trained Classifier Loaded")
            msgBox.exec_()
            self.EyeClassifierButton.setEnabled(True)
            self.LoadTrainDataButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Face Pre-trained Classifier Loaded!!!")
            msgBox.exec_()

    def on_EyeClassifierButton_clicked(self):
        # Load the .xml file with File Picker
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select Eye Pre-trained Classifier","","*.xml", options=options)
        global EyeXML
        EyeXML = fileName
        if isfile(EyeXML):
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Eye Pre-trained Classifier Loaded")
            msgBox.exec_()
            self.LoadFaceImageButton.setEnabled(True)
            self.CaptureFaceImageButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Eye Pre-trained Classifier Loaded!!!")
            msgBox.exec_()

    def on_LoadFaceImageButton_clicked(self):
        # Load an Image with File Picker
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select an Image","","Image Files (*.jpg *.jpeg *.JPG *.tif *.tiff *.png *.bmp)", options=options)
        # Read the Image
        img = cv.imread(fileName)
        global Face
        Face = img
        if Face is not None:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Image Loaded Successfully")
            msgBox.exec_()
            self.DetectFaceButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Image Loaded!!!")
            msgBox.exec_()

    def on_CaptureFaceImageButton_clicked(self):
        # Initialize Capture
        cap = cv.VideoCapture(0) # 0 is internal cam ; 1 is external webcam
        # Show the Message
        msgBox = QMessageBox()
        msgBox.setText("Attention!")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
        msgBox.setInformativeText("Press 'c' to Capture Image, 'q' to Quit")
        msgBox.exec_()
        while(True):
            ret, frame = cap.read()
            cv.imshow("Camera",frame)
            key=cv.waitKey(30)
            if key==ord('q'):
                break
            # Capture the Image
            if key==ord('c'):
                cv.imshow("Captured Image",frame)
                # Show the Message
                msgBox1 = QMessageBox()
                msgBox1.setText("Image Captured & Loaded successfully")
                msgBox1.setInformativeText("Do you want to save Captured Image?")
                msgBox1.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
                msgBox1.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
                msgBox1.setDefaultButton(QMessageBox.Save)
                ret1 = msgBox1.exec_()
                if ret1 == QMessageBox.Save:
                    # Save was Clicked
                    fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
                    cv.imwrite(fileName, frame)
                    break
                elif ret1 == QMessageBox.Discard:
                    # Discard was Clicked
                    break
            global Face
            Face = frame
            self.DetectFaceButton.setEnabled(True)
        # Release Capture
        cap.release()
        cv.destroyAllWindows()

    def on_DetectFaceButton_clicked(self):
        # Haar-cascade Face Detection (Found on https://docs.opencv.org/3.4.2/d7/d8b/tutorial_py_face_detection.html)
        # Create Classifiers
        face_cascade = cv.CascadeClassifier(FaceXML)
        eye_cascade = cv.CascadeClassifier(EyeXML)
        gray = cv.cvtColor(Face, cv.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)
        if len(faces) == 0:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("No Faces found!!!")
            msgBox.exec_()
        else:
            for (x,y,w,h) in faces:
                cv.rectangle(Face,(x,y),(x+w,y+h),(0,0,255),2)
                roi_gray = gray[y:y+h, x:x+w]
                roi_color = Face[y:y+h, x:x+w]
                eyes = eye_cascade.detectMultiScale(roi_gray)
                for (ex,ey,ew,eh) in eyes:
                    cv.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)
        face = cv.resize(Face,(640,640),interpolation = cv.INTER_AREA)
        cv.imshow("Detected Face",face)
        # Save the Image (If asked by the User)
        msgBox = QMessageBox()
        msgBox.setText("Do you want to save the Result?")
        msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
        msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
        msgBox.setDefaultButton(QMessageBox.Save)
        ret = msgBox.exec_()
        if ret == QMessageBox.Save:
            # Save was Clicked
            fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
            cv.imwrite(fileName, im1Reg)
            cv.destroyAllWindows()
        elif ret == QMessageBox.Discard:
            # Discard was Clicked
            cv.destroyAllWindows()
        cv.waitKey()

    def on_LoadTrainDataButton_clicked(self):
        # Load the Folder with Picker
        dir = QFileDialog.getExistingDirectory(IPCVToolBox,"Select a Directory containing Training Images","",  QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks)
        global dirFace
        dirFace = dir
        if dirFace is not None:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Face Image Directory Selected")
            msgBox.exec_()
            self.LoadTrainLabelsButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Image Directory Selected!!!")
            msgBox.exec_()

    def on_LoadTrainLabelsButton_clicked(self):
        # Load the .txt file having Labels
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select Face data Labels","","*.txt", options=options)
        global FaceLabel
        FaceLabel = fileName
        if isfile(FaceLabel):
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Face data Labels Loaded  Successfully")
            msgBox.exec_()
            self.TrainRecognizerButton.setEnabled(True)
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Face data Labels Loaded!!!")
            msgBox.exec_()

    def on_TrainRecognizerButton_clicked(self):
        # Train the Face Recognizer (Found on https://github.com/sahumukesh/Face_Recognition/blob/master/Face-Recognition.ipynb)
        if self.LBPHRecognizerButton.isChecked() == True:
            # Create LBPH Face Recognizer
            face_recognizer = cv.face.LBPHFaceRecognizer_create()
        elif self.EigenRecognizerButton.isChecked() == True:
            # Create Eigen Face Recognizer
            face_recognizer = cv.face.EigenFaceRecognizer_create()
        elif self.FisherRecognizerButton.isChecked() == True:
            # Create Fisher Face Recognizer
            face_recognizer = cv.face.FisherFaceRecognizer_create()
        global Face_recognizer
        Face_recognizer = face_recognizer
        # Get the Folders (One Folder for each Subject)
        dirs = listdir(dirFace)
        if (len(dirs) == 0):
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("No Image Folders Found")
            msgBox.exec_()
        else:
            # List to hold all subject faces
            faces = []
            # List to hold labels for all subjects
            labels = []
            # Go through each directory and read images within it
            for dir_name in dirs:
                label = int(dir_name)
                subject_dir_path = dirFace + "/" + dir_name
                # Get the images names that are inside the given subject directory
                subject_images_names = listdir(subject_dir_path)
                if (len(subject_images_names) == 0):
                    # Show the Message
                    msgBox = QMessageBox()
                    msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                    msgBox.setText("No Training Images Found in the Current Folder")
                    msgBox.exec_()
                else:
                    # Detect face and add face to list of faces
                    for image_name in subject_images_names:
                        # Ignore system files like .DS_Store
                        if image_name.startswith("."):
                            continue
                        # Build image path
                        image_path = subject_dir_path + "/" + image_name
                        # Read the image
                        image = cv.imread(image_path)
                        image =cv.resize(image,(512,512),interpolation = cv.INTER_AREA)
                        # Display the image
                        cv.imshow("Training on Image", image)
                        cv.waitKey(100)
                        # Detect face
                        face, rect = detectFace(image)
                        if face is not None:
                            face =cv.resize(face,(120,120),interpolation = cv.INTER_AREA)
                            # Add face to list of faces
                            faces.append(face)
                            # Add label for this face
                            labels.append(label)
                    cv.destroyAllWindows()
                    cv.waitKey(1)
                    cv.destroyAllWindows()
            if faces is not None:
                # Training with given data
                face_recognizer.train(faces, np.array(labels))
                # Show the Message
                msgBox = QMessageBox()
                msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
                msgBox.setText("Face Recognizer Trained Successfully")
                msgBox.exec_()
                self.LoadFaceRecogImageButton.setEnabled(True)

    def on_LoadFaceRecogImageButton_clicked(self):
        # Load an Image with File Picker
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(IPCVToolBox,"Select an Image","","Image Files (*.jpg *.jpeg *.JPG *.tif *.tiff *.png *.bmp)", options=options)
        # Read the Image
        img = cv.imread(fileName)
        if img is not None:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Image Loaded Successfully")
            msgBox.exec_()
            self.RecognizeFaceButton.setEnabled(True)
            img = cv.resize(img,(512,512),interpolation = cv.INTER_AREA)
            global FaceR
            FaceR = img
        else:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setText("Attention!")
            msgBox.setInformativeText("No Image Loaded!!!")
            msgBox.exec_()

    def on_RecognizeFaceButton_clicked(self):
        img = FaceR.copy()
        # Detect face in the image
        face, rect = detectFace(img)
        if face is None:
            # Show the Message
            msgBox = QMessageBox()
            msgBox.setText("Attention!")
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;} QPushButton{ width:100px; font-size:12px; }")
            msgBox.setInformativeText("No Faces found!!!")
            msgBox.exec_()
        else:
            face =cv.resize(face,(120,120),interpolation = cv.INTER_AREA)
            # Predict the Image Label with Face Recognizer
            label= Face_recognizer.predict(face)
            # Get Name of respective Label returned by Face Recognizer
            subjects = [line.rstrip('\n') for line in open(FaceLabel)]
            label_text = subjects[label[0]]
            # Draw a Rectangle around Detected Face and Name it
            (x, y, w, h) = rect
            cv.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)
            cv.putText(img, label_text, (rect[0], rect[1]-5), cv.FONT_HERSHEY_PLAIN, 1.5, (0, 255, 0), 2)
            cv.imshow("Face Recognition", img)
            # Save the Image (If asked by the User)
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
            msgBox.setText("Do you want to save the Result?")
            msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
            msgBox.setDefaultButton(QMessageBox.Save)
            ret = msgBox.exec_()
            if ret == QMessageBox.Save:
                # Save was Clicked
                fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
                cv.imwrite(fileName, img)
                cv.destroyAllWindows()
            elif ret == QMessageBox.Discard:
                # Discard was Clicked
                cv.destroyAllWindows()
            cv.waitKey()

def drawLines(img1,img2,lines,pts1,pts2):
    # Draw Epipolar Lines (Found on https://docs.opencv.org/3.4.2/da/de9/tutorial_py_epipolar_geometry.html)
    r,c,ch = img1.shape
    for r,pt1,pt2 in zip(lines,pts1,pts2):
        color = tuple(np.random.randint(0,255,3).tolist())
        x0,y0 = map(int, [0, -r[2]/r[1] ])
        x1,y1 = map(int, [c, -(r[2]+r[0]*c)/r[1] ])
        img1 = cv.line(img1, (x0,y0), (x1,y1), color,1)
        img1 = cv.circle(img1,tuple(pt1),5,color,-1)
        img2 = cv.circle(img2,tuple(pt2),5,color,-1)
    return img1,img2

def detectFace(img):
    # Detect face using OpenCV Cascade Classifier (Found on https://github.com/sahumukesh/Face_Recognition/blob/master/Face-Recognition.ipynb)
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
    # Load OpenCV face detector
    face_cascade = cv.CascadeClassifier(FaceXML)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.2, minNeighbors=5)
    # If no faces are detected then return original img
    if (len(faces) == 0):
        return None, None
    # Under the assumption that there will be only one face, extract the face area
    (x, y, w, h) = faces[0]
    # Return only the face part of the image
    return gray[y:y+w, x:x+h], faces[0]

def show_N_save(Input, Output, Ilabel, Olabel):
    # Show Input & Output Image Side-by-Side
    # Set Image Borders and Title (Found on https://stackoverflow.com/questions/42420470/opencv-subplots-images-with-titles-and-space-around-borders)
    I = cv.resize(Input,(300,300),interpolation = cv.INTER_AREA)
    O = cv.resize(Output,(300,300),interpolation = cv.INTER_AREA)
    constant1=cv.copyMakeBorder(I,50,10,10,10,cv.BORDER_CONSTANT,value=[200,200,200])
    constant2=cv.copyMakeBorder(O,50,10,10,10,cv.BORDER_CONSTANT,value=[200,200,200])
    img1 = cv.putText(constant1.copy(), Ilabel, (60, 30), cv.FONT_HERSHEY_PLAIN, 1, (0,0,0))
    img2 = cv.putText(constant2.copy(), Olabel, (60, 30), cv.FONT_HERSHEY_PLAIN, 1, (0,0,0))
    result = cv.hconcat((img1, img2))
    cv.imshow('Output',result)
    # Save the Image (If asked by the User)
    msgBox = QMessageBox()
    msgBox.setStyleSheet("QLabel{min-width:300 px; font-size: 16px;}")
    msgBox.setText("Do you want to save the Result?")
    msgBox.setStandardButtons(QMessageBox.Save | QMessageBox.Discard)
    msgBox.setDefaultButton(QMessageBox.Save)
    ret = msgBox.exec_()
    if ret == QMessageBox.Save:
        # Save was Clicked
        fileName, _ = QFileDialog.getSaveFileName(IPCVToolBox,"Save Output")
        cv.imwrite(fileName, result)
        cv.destroyAllWindows()
    elif ret == QMessageBox.Discard:
        # Discard was Clicked
        cv.destroyAllWindows()
    cv.waitKey()

# Run the File
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    IPCVToolBox = QtWidgets.QDialog()
    ui = Ui_IPCVToolBox()
    ui.setupUi(IPCVToolBox)
    IPCVToolBox.show()
    sys.exit(app.exec_())
